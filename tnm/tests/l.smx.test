# Commands covered:  smx				-*- tcl -*-
#
# This file contains a collection of tests for one or more of the Tnm
# commands. Sourcing this file into scotty runs the tests and generates
# output for errors.  No output means no errors were found.
#
# Copyright (c) 2000-2001 Technical University of Braunschweig.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# @(#) $Id: smx.test,v 1.1.1.1 2006/12/07 12:16:58 karl Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

package require Tnm 3.0
catch {
    namespace import Tnm::smx
}

proc rte {msg} {
    global smx
    # puts stderr "> $msg"
    if {[catch {puts $smx(channel) $msg}]} {
	return "smx peer gone away"
    }
    while {! [eof $smx(channel)]} {
	gets $smx(channel) resp
	# puts stderr "< $resp"
	if {1 == [scan $resp %d code]} {
	    if {[string match {[24][0-9][0-9]} $code]} {
		break
	    }
	}
    }
    if {[eof $smx(channel)]} {
	return "smx peer gone away"
    }
    return $resp
}

proc accept {channel address port} {
    global smx
    set smx(channel) $channel
    fconfigure $smx(channel) -buffering none -translation {crlf crlf}
}

proc startengine {} {
    global env smx
    for {set port 5555} {$port < 6666} {incr port} {
	if {! [catch {socket -server accept $port} listen]} {
	    break
	}
    }
    set env(SMX_PORT) $port
    set env(SMX_COOKIE) 010a020b030c040d050e060f
    set file /tmp/smx-profile
    makeFile {
	package require Tnm 3.0
	package require TnmSmxProfiles 3.0
	namespace import TnmSmxProfiles::*
    } $file
    exec scotty3.0.2 $file &
    vwait smx(channel)
}

test smx-1.1 {smx command} {
    list [catch {smx} msg] $msg
} {1 {wrong # args: should be "smx option ?arg arg ...?"}}

test smx-1.2 {smx command} {
    list [catch {smx foo} msg] $msg
} {1 {bad option "foo": must be error, exit, log, profiles, or result}}

test smx-1.3 {smx command} {
    list [catch {smx result} msg] $msg
} {1 {wrong # args: should be "smx result ?-notify? string"}}

test smx-1.4 {smx command} {
    list [catch {smx result foo bar} msg] $msg
} {1 {wrong # args: should be "smx result ?-notify? string"}}

test smx-1.5 {smx command} {
    list [catch {smx result -notify foo bar} msg] $msg
} {1 {wrong # args: should be "smx result ?-notify? string"}}

test smx-1.6 {smx command} {
    smx result -notify foo
} {}

test smx-1.7 {smx command} {
    smx result foo
} {}

test smx-1.8 {smx command} {
    list [catch {smx log} msg] $msg
} {1 {wrong # args: should be "smx log message"}}

test smx-1.9 {smx command} {
    list [catch {smx log foo bar} msg] $msg
} {1 {wrong # args: should be "smx log message"}}

test smx-1.10 {smx command} {
    smx log foo
} {}

test smx-1.11 {smx command} {
    list [catch {smx profiles foo bar} msg] $msg
} {1 {wrong # args: should be "smx profiles ?list?"}}

test smx-1.12 {smx command} {
    list [catch {smx profiles {"}} msg] $msg
} {1 {unmatched open quote in list}}

test smx-1.13 {smx command} {
    list [catch {smx exit foo bar} msg] $msg
} {1 {wrong # args: should be "smx exit ?exitCode?"}}

test smx-1.14 {smx command} {
    list [catch {smx exit foo} msg] $msg
} {1 {unknown exit code "foo": should be noError, halted, lifeTimeExceeded, noResourcesLeft, languageError, runtimeError, invalidArgument, securityViolation, or genericError}}

test smx-1.15 {smx command} {
    list [catch {smx error} msg] $msg
} {1 {wrong # args: should be "smx error ?-notify? string"}}

test smx-1.16 {smx command} {
    list [catch {smx error foo bar} msg] $msg
} {1 {wrong # args: should be "smx error ?-notify? string"}}

test smx-1.17 {smx command} {
    list [catch {smx error -notify foo bar} msg] $msg
} {1 {wrong # args: should be "smx error ?-notify? string"}}

test smx-1.18 {smx command} {
    smx error -notify foo
} {}

test smx-1.19 {smx command} {
    smx error foo
} {}

startengine

# Note: Commands must always have a valid command name and transaction
# identifier in order to receive a response back.

Tnm::smx profiles {profile trusted master}

test smx-2.1 {command syntax} {
    rte "foobar 21"
} {402 21}

test smx-2.2 {command syntax} {
    rte "hello 22"
} {211 22 SMX/1.1 010a020b030c040d050e060f}

test smx-2.3 {command syntax} {
    rte "start 23"
} {431 23}

test smx-2.4 {command syntax} {
    rte "start 24 42"
} {421 24}

test smx-2.5 {command syntax} {
    rte "start 25 42 AABBCC"
} {421 25}

test smx-2.6 {command syntax} {
    rte "start 26 42 \"script\""
} {432 26}

test smx-2.7 {command syntax} {
    rte "start 27 42 \"script\" \"nase\""
} {432 27}

test smx-2.8 {command syntax} {
    rte "start 28 42 \"script\" a+b"
} {432 28}

test smx-2.9 {command syntax} {
    rte "start 29 42 \"script\" profile"
} {433 29}

test smx-2.10 {command syntax} {
    rte "start 30 42 \"script\" profile a"
} {433 30}

test smx-2.11 {command syntax} {
    rte "start 31 42 \"script\" profile argument"
} {433 31}

test smx-2.12 {command syntax} {
    rte "start 32 42 \"/dev/null\" xxxx \"\""
} {432 32}

test smx-2.13 {command syntax} {
    rte "start 33 42 \"/stupid/script/name\" profile \"\""
} {421 33}

test smx-2.14 {command syntax} {
    rte "start 34 42 \"/dev/null\" safe \"\""
} {231 34 1}

test smx-2.15 {command syntax} {
    rte "status 35 42"
} {231 35 2}

test smx-2.16 {command syntax} {
    set file /tmp/smx-2.16
    makeFile {
	package require Tnm 3.0
	set cnt 0
	Tnm::job create -iterations 10 -interval 10 -command { 
	    Tnm::smx result "[incr cnt] job running [info cmdcount]"
	}
	after 30 {
	    Tnm::smx exit
	}
    } $file 
    rte "start 36 43 \"$file\" safe \"\""
} {231 36 1}

after 1000

test smx-2.17 {command syntax} {
    rte "status 37 43"
} {431 37}

test smx-2.18 {command syntax} {
    rte "status 38 42"
} {231 38 2}

test smx-2.19 {command syntax} {
    rte "abort 39 42"
} {232 39}

test smx-2.20 {command syntax} {
    rte "status 40 42"
} {431 40}

test smx-2.21 {command syntax} {
    set file /tmp/smx-2.21
    makeFile {
	package require Tnm 3.0
	Tnm::smx result [package names]
	Tnm::smx result [Tnm::snmp info pdus]
	Tnm::smx exit
    } $file
    rte "start 41 44 \"$file\" safe \"\""
} {231 41 1}

test smx-2.22 {command syntax} {
    rte "status 42 44"
} {431 42}

test smx-2.23 {command syntax} {
    set file /tmp/smx-2.23
    makeFile {
	package require Tnm 3.0
	Tnm::smx result [Tnm::snmp info pdus]
	Tnm::smx exit
    } $file
    rte "start 43 45 \"$file\" snmp \"\""
} {231 43 1}

test smx-2.24 {command syntax} {
    rte "status 44 45"
} {431 44}

test smx-2.25 {command syntax} {
    set file /tmp/smx-2.25
    makeFile {
	package require Tnm 3.0
	Tnm::smx result [list $argc $argv $argv0]
	Tnm::smx exit
    } $file
    rte "start 45 46 \"$file\" safe \"a b c\""
} {231 45 1}

test smx-2.26 {command syntax} {
    rte "status 46 46"
} {431 46}

test smx-2.27 {command syntax} knownBug {
    set file /tmp/smx-2.27
    makeFile {
	package require Tnm 3.0
	Tnm::mib load IF-MIB
	set s [Tnm::snmp generator -address 134.169.34.12]
	$s configure -address 134.169.34.21
	Tnm::smx result [list [catch {$s getnext 1.3} msg] $msg]
	$s destroy
	Tnm::smx exit
    } $file
    rte "start 47 47 \"$file\" snmp-134.169 \"\""
} {231 47 1}

test smx-2.28 {command syntax} {
    rte "status 48 47"
} {431 48}

catch {close $smx(channel)}

::tcltest::cleanupTests
return
