# Commands covered:  udp				-*- tcl -*-
#
# This file contains a collection of tests for one or more of the Tnm
# commands. Sourcing this file into scotty runs the tests and generates
# output for errors.  No output means no errors were found.
#
# Copyright (c) 1994-1996 Technical University of Braunschweig.
# Copyright (c) 1996-1997 University of Twente.
# Copyright (c) 1997-2003 Technical University of Braunschweig.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# @(#) $Id: udp.test,v 1.1.1.1 2006/12/07 12:16:58 karl Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

set verbosity [configure -verbose]
configure -verbose {body error skip}

testConstraint knownBugMacOSX\
    [expr {!($::tcl_platform(os) eq "Darwin")}]

package require Tnm 3.0
catch {
    namespace import Tnm::udp
}

set UNREACHABLE_IP 192.0.2.0
set SOME_PORT 39123
set OTHER_PORT 28101
set YA_PORT 38112

foreach u [udp find] { $u destroy }

test udp-1.1 {udp command} {
    list [catch {udp} msg] $msg
} {1 {wrong # args: should be "udp option ?arg arg ...?"}}
test udp-1.2 {udp command} {
    list [catch {udp foo} msg] $msg
} {1 {bad option "foo": must be create or find}}

foreach u [udp find] { $u destroy }

test udp-2.1 {udp find} {
    list [catch {udp find nase} msg] $msg
} {1 {wrong # args: should be "udp find ?option value? ?option value? ..."}}
test udp-2.2 {udp find} {
    list [catch {udp find foo bar} msg] $msg
} {1 {bad option "foo": must be -tags}}
test udp-2.3 {udp find} {
    udp find
} {}
test udp-2.4 {udp find} {
    set result {}
    rename [udp create -tags foo] _foo_
    rename [udp create -tags {foo bar}] _foo_bar_
    rename [udp create -tags bar] _bar_
    lappend result [lsort [udp find -tags ?ar]]
    lappend result [lsort [udp find -tags foo]]
    lappend result [lsort [udp find -tags {?ar *oo}]]
    foreach u [udp find] { $u destroy }
    set result
} {{_bar_ _foo_bar_} {_foo_ _foo_bar_} _foo_bar_}

foreach u [udp find] { $u destroy }

test udp-3.1 {udp create} {
    set u [udp create]
    string compare $u [udp find]
} {0}
test udp-3.2 {udp create} {
    foreach u [udp find] { $u destroy }
    rename [udp create] foo
    string compare foo [udp find]
} {0}
test udp-3.3 {udp create} {
    [udp create] configure
} {-address 0.0.0.0 -port 0 -myaddress 0.0.0.0 -myport 0 -read {} -write {} -tags {}}
# On (Free)BSD you must assign individual addresses within 127/8 to the loopback
# interface.  This requires root privileges, so better let's rewrite 127.1.2.3 in
# the following test to 127.0.0.1
test udp-3.4 {udp create} {
    [udp create -myaddress 127.0.0.1 -myport 1234] configure
} {-address 0.0.0.0 -port 0 -myaddress 127.0.0.1 -myport 1234 -read {} -write {} -tags {}}
test udp-3.5 {udp create} {
    [udp create -myaddress 127.0.0.1 -myport 1235] cget -myport
} {1235}
test udp-3.6 {udp create} {
    [udp create -myaddress 127.0.0.1 -myport 1236] cget -myaddress
} {127.0.0.1}

foreach u [udp find] { $u destroy }

test udp-4.1 {udp destroy} {
    [udp create] destroy
    udp find
} {}
test udp-4.2 {udp destroy} {
    catch {[udp create] destroy foo}
} {1}

foreach u [udp find] { $u destroy }

test udp-5.1 {udp connect} {
    set u [udp create]
    $u connect 127.0.0.1 7	;# echo port
    $u configure
} {-address 0.0.0.0 -port 0 -myaddress 0.0.0.0 -myport 0 -read {} -write {} -tags {}}
# {-address 127.0.0.1 -port 7 -myaddress 0.0.0.0 -myport 0 -read {} -write {} -tags {}}

foreach u [udp find] { $u destroy }
#
# 6 udp send
#

test udp-6.1 {udp send: default args} {
    catch {rename u {}}
    rename [udp create] u
    u send 127.0.0.1 7 "nase"
    u destroy
} {}

test udp-6.2 {udp send: only msg, w/o connect @#!} {
    catch {rename u {}}
    rename [udp create] u
    list [catch {u send "nase"} msg] $msg
} {1 {wrong # args: should be "u send host port string. UDP endpoint must either be connected, or -address and -port configured."}}
# {1 {wrong # args: should be "u send host port string"}}

test udp-6.3 {udp send: only msg, connected} {
    catch {rename u {}}
    rename [udp create] u
    u connect 127.0.0.1 7
    u send "nase"
} {}

test udp-6.4 {udp send: default args, connected @#!} {
    catch {rename u {}}
    rename [udp create] u
    u connect 127.0.0.1 7
    list [catch {u send 127.0.0.1 7 "nase"} msg] $msg
} {1 {wrong # args: should be "u send string. UDP endpoint is in connected state."}}

foreach u [udp find] { $u destroy }
#
# 7 udp receive
#
test udp-7.1 {udp receive: one endpoint} knownBugMacOSX {
    catch {rename u {}}
    rename [udp create -myaddress 127.0.0.1 -myport 1234] u
    u send 127.0.0.1 1234 "nase"
    u receive
} {127.0.0.1 1234 nase}

test udp-7.2 {udp receive: two endpoints} knownBugMacOSX {
    catch {rename u {}}
    rename [udp create -myaddress 127.0.0.1 -myport 1235] u
    set s [udp create -myaddress 127.0.0.1 -myport 1236]
    $s connect 127.0.0.1 1235
    $s send "nase"
    $s destroy
    u receive
} {127.0.0.1 1236 nase}

test udp-7.3 {udp receive} knownBugMacOSX {
    catch {rename u {}}
    rename [udp create -myaddress 127.0.0.1 -myport 1234] u
    u send 127.0.0.1 1234 \
	[binary format "H*" "000102030405060708090a0b0c0d0e0f"]
    binary scan [lindex [u receive] 2] "H*" s
    set s
} {000102030405060708090a0b0c0d0e0f}

foreach u [udp find] { $u destroy }
#
# 8 bind
#
test udp-8.1 {udp bind} {
    global result
    catch {rename u {}}
    rename [udp create -myaddress 127.0.0.1 -myport 1234] u
    set result ""
    u configure -read {set result [u receive]}
    u send 127.0.0.1 1234 "hi there"
    after 100
    update
    set result
} {127.0.0.1 1234 {hi there}}

foreach u [udp find] { $u destroy }

# Nowadays we care a lot about privacy, so we shouldn't involuntarily
# send private data to an unknown host.  Also: do we know, if
# 134.169.34.12 (zfs0.ibr.cs.tu-bs.de) still wants to receive this
# fingers?
testConstraint sayHelloToBraunschweigUniversity 0

test udp-9.1 {udp says hello} sayHelloToBraunschweigUniversity {
    global tnm
    set date [clock format [clock seconds] -format "%b %d %T"]
    set me "$tnm(user)@$tnm(host).$tnm(domain)"
    set scotty "scotty-$tnm(version) on $tnm(arch)"
    catch {
	set u [udp create]
	$u connect 134.169.34.12 syslog
	$u send "<14>$date scotty: greetings from $me running $scotty"
	$u destroy
    }
    concat
} {}

foreach u [udp find] { $u destroy }
#
# 10 udp# info
#
# Test udp# info command
test udp-10.1 {udp info: wrong # args} -body {
    catch {rename udp# {}}
    rename [udp create] udp#
    udp# info blaah
} -returnCodes error -result "wrong # args: should be \"udp# info\""

test udp-10.2 {udp info: unconnected} -body {
    set u [udp create]
    $u info
} -match regexp -result {connected 0 address 0.0.0.0 port [0-9]{1,5}}

test udp-10.3 {udp info: connected unreachable} -body {
    set u [udp create]
    $u connect $UNREACHABLE_IP $::SOME_PORT
    $u info
} -result "connected -1 address $::UNREACHABLE_IP port $SOME_PORT"

test udp-10.4 {udp info: connected reachable (localhost)} -body {
    set u [udp create]
    $u connect 127.0.0.1 $::SOME_PORT
    $u info
} -result "connected -1 address 127.0.0.1 port $::SOME_PORT"

foreach u [udp find] { $u destroy }
#
# 11 -address, -port
#
# Test -address and -port configure options. This involves the
# commands `udp# send` and `udp# connect` commands too.
test udp-11.1.1 {udp configure: -address saves arg} -body {
    set u [udp create]
    $u configure -address $::UNREACHABLE_IP
    $u cget -address
} -result $::UNREACHABLE_IP

test udp-11.1.2 {udp configure: -port saves arg} -body {
    set u [udp create]
    $u configure -port $::SOME_PORT
    $u cget -port
} -result $::SOME_PORT

test udp-11.1.3 {udp configure: -address -port saves arg} -body {
    set u [udp create]
    $u configure -address $::UNREACHABLE_IP -port $::SOME_PORT
    $u configure
} -result "-address $::UNREACHABLE_IP -port $SOME_PORT -myaddress 0.0.0.0 -myport 0 -read {} -write {} -tags {}"

test upd-11.1.4 {udp create: -address --port saves args} -body {
    [udp create -address $::UNREACHABLE_IP -port $SOME_PORT] configure
} -result "-address $::UNREACHABLE_IP -port $SOME_PORT -myaddress 0.0.0.0 -myport 0 -read {} -write {} -tags {}"

test udp-11.1.5 {udp configure: -address -port disconnects} -body {
    set u [udp create]
    $u connect 127.0.0.1 $::SOME_PORT
    catch {unset i}
    array set i [$u info]
    if {!$i(connected)} {error "not connected!"}
    $u configure -address $::UNREACHABLE_IP -port $::OTHER_PORT
    $u info
} -result [list connected 0 address 127.0.0.1 port $::SOME_PORT]

test dup-11.1.6 {upd connect: after configure reconnects} -body {
    catch {rename udp# {}}
    rename [udp create] udp#
    udp# connect $::UNREACHABLE_IP $OTHER_PORT
    udp# configure -address $::UNREACHABLE_IP -port $::SOME_PORT
    udp# connect 127.0.0.1 $::YA_PORT
    udp# info
} -result [list connected -1 address 127.0.0.1 port $::YA_PORT]

test udp-11.2.1 {udp configure/send: send to configured, w/o connect} -constraints {
} -body {
    catch {rename udp# {}}
    set  r [udp create -myaddress 127.0.0.1 -myport $::SOME_PORT]
    rename [udp create -address 127.0.0.1 -port $::SOME_PORT \
		-myport $::OTHER_PORT] udp#
    udp# send "nase"
    $r receive
} -result "127.0.0.1 $::OTHER_PORT nase"

test udp-11.2.2 {udp configure/send: send to connected} -constraints {
} -body {
    catch {rename udp# {}}
    rename [udp create -myaddress 127.0.0.1 -myport $::SOME_PORT] udp#
    udp# configure -address 127.0.0.1 -port $::OTHER_PORT
    udp# connect 127.0.0.1 $::SOME_PORT
    udp# send "nase"
    udp# receive
} -result "127.0.0.1 $::SOME_PORT nase"

test udp-11.2.3 {udp configure/send: send to configured, connected} -constraints {
} -body {
    catch {rename udp# {}}
    set r [udp create -myaddress 127.0.0.1 -myport $::SOME_PORT]
    rename [udp create -myaddress 127.0.0.1 -myport $::OTHER_PORT] udp#
    udp# connect 127.0.0.1 $::OTHER_PORT
    udp# configure -address 127.0.0.1 -port $::SOME_PORT
    udp# send "nase"
    $r receive
} -result "127.0.0.1 $::OTHER_PORT nase"


foreach u [udp find] { $u destroy }

::tcltest::cleanupTests
configure -verbose $verbosity
return
