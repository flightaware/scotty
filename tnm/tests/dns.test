# Commands covered:  dns				-*- tcl -*-
#
# This file contains a collection of tests for one or more of the Tnm
# commands. Sourcing this file into scotty runs the tests and generates
# output for errors.  No output means no errors were found.
#
# Copyright (c) 1994-1996 Technical University of Braunschweig.
# Copyright (c) 1996-1997 University of Twente.
# Copyright (c) 1997-1998 Technical University of Braunschweig.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# @(#) $Id: dns.test,v 1.1.1.1 2006/12/07 12:16:58 karl Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2
    namespace import ::tcltest::*
}

package require Tnm 3.0
catch {
    namespace import Tnm::dns
}
configure -debug 0
set verbosity [configure -verbose] 
configure -verbose {body error skip}

testConstraint dnsAvailable \
    [expr {![catch {dns address www.iana.org}]}]

testConstraint knownBugMacOSX\
    [expr {!($::tcl_platform(os) eq "Darwin")}]

# save default settings...
set dnsServer  [dns -server]
set dnsTimeout [dns -timeout]
set dnsRetries [dns -retries]

test dns-1.1 {dns no arguments} {
    list [catch {dns} msg] $msg
} {1 {wrong # args: should be "dns ?-timeout t? ?-retries r? ?-server hosts? option arg"}}
test dns-1.2 {dns too many arguments} {
    list [catch {dns foo bar boo} msg] $msg
} {1 {wrong # args: should be "dns ?-timeout t? ?-retries r? ?-server hosts? option arg"}}
test dns-1.3 {dns wrong option} {
    list [catch {dns foo bar} msg] $msg
} {1 {bad option "foo": must be address, hinfo, mx, name, or soa}}
#----------------------------------------------------------
test dns-2.1 {dns timeout option} {
    dns -timeout 11
    dns -timeout
} {11}
test dns-2.2 {dns timeout option: unknown argument} {
    list [catch {dns -timeout foo} msg] $msg
} {1 {expected positive integer but got "foo"}}
test dns-2.3 {dns timeout option: argument <1} {
    list [catch {dns -timeout 0} msg] $msg
} {1 {expected positive integer but got "0"}}
#----------------------------------------------------------
test dns-2.4 {dns retries option} {
    dns -retries 7
    dns -retries
} {7}
test dns-2.5 {dns retries option: unknown argument} {
    list [catch {dns -retries foo} msg] $msg
} {1 {expected unsigned integer but got "foo"}}
test dns-2.6 {dns retries option: negative argument} {
    list [catch {dns -retries -1} msg] $msg
} {1 {expected unsigned integer but got "-1"}}
#----------------------------------------------------------
test dns-2.7 {dns server option} knownBugMacOSX {
    dns -server localhost
    dns -server
} {127.0.0.1}
test dns-2.8 {dns server option: illegal argument} knownBugMacOSX {
    list [catch {dns -server "no@name"} msg] $msg
} {1 {illegal IP address or name "no@name"}}
# RFC6761/invalid domain name
test dns-2.9 {dns server option: name does not exist} {dnsAvailable knownBugMacOSX} {
    list [catch {dns -server "domain.invalid"} msg] $msg
} {1 {unknown IP host name "domain.invalid"}}
# Historical note: this is an IP at Braunschweig University
test dns-2.10 {dns options: set all at once} knownBugMacOSX {
    dns -server 134.169.34.1 -retries 0 -timeout 1
    concat [dns -server] [dns -timeout] [dns -retries]
} {134.169.34.1 1 0}

# On MacOSX we must not use the `dns -server arg` command, else name
# resolution fails (logic values for 'knownBug' are inverse)
if {[testConstraint knownBugMacOSX]} {
    dns -server $dnsServer -retries $dnsRetries -timeout $dnsTimeout
}
#----------------------------------------------------------
# We use iana.org for tests.  If this domain should happen to go away
# there would be no need for Tnm::dns anyway. 
test dns-3.1 {dns address: internet host} -constraints {
    dnsAvailable
} -body {
    set ::ianaIp [lindex [dns address www.iana.org] 0]
} -match glob -result {*.*.*.*}
# localhost is typically in /etc/hosts, no constraint needed
# but beware.
# No network! Why would you need scotty then?
test dns-3.2 {dns address: IPv4 of localhost} {
    list [catch {dns address "127.0.0.1"} msg] $msg
} {0 127.0.0.1}
test dns-3.3 {dns address: invalid IPv4} dnsAvailable {
    list [catch {dns address "1.2.3.4.5"} msg] $msg
} {1 {non existent domain}}
#----------------------------------------------------------
test dns-4.1 {dns name: valid IPv4} -constraints {
    dnsAvailable
} -body {
    dns name $::ianaIp
} -match regexp -result {.*\.iana\.org}
test dns-4.2 {dns name: illegal IPv4 string} {
    list [catch {dns name "no name"} msg] $msg
} {1 {illegal IP address "no name"}}
test dns-4.3 {dns name: illegal IPv4 dotted octets} {
    list [catch {dns name "1.2.3.4.5"} msg] $msg
} {1 {illegal IP address "1.2.3.4.5"}}
#----------------------------------------------------------
# RFC5737/invalid ip address
# Note: hinfo is "Not in current use by any notable application"
# according to Wikipedia
test dns-5.1 {dns hinfo: not available} dnsAvailable {
    list [catch {dns hinfo 192.0.2.0} msg] $msg
} {1 {cannot reverse lookup "192.0.2.0"}}
# dns hinfo seems buggy, so we disable it.
test dns-5.2 {dns hinfo: internet host} -constraints {
    knownBug
} -body {
    [list catch {dns hinfo iana.org} msg] $msg
} -result {1 {iana.org has no HINFO record}}
#----------------------------------------------------------
test dns-6.1 {dns mx: internet host} -constraints {
    dnsAvailable
} -body {
    lindex [dns mx iana.org] 0
} -match regexp -result {.*\.org [0-9]{1,3}}
#----------------------------------------------------------
# dns soa is buggy, so we disable it.
test dns-7.1 {dns soa: internet host} -constraints {
    knownBug
} -body {
    dns soa iana.org
} -match regexp -result {iana.org has SOA record sns.dns.icann.org. noc.dns.icann.org. 2016111663 7200 3600 1209600 3600}

::tcltest::cleanupTests

configure -verbose $verbosity

return
