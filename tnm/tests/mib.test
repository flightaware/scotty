# Commands covered:  mib				-*- tcl -*-
#
# This file contains a collection of tests for one or more of the Tnm
# commands. Sourcing this file into scotty runs the tests and generates
# output for errors.  No output means no errors were found.
#
# Copyright (c) 1994-1996 Technical University of Braunschweig.
# Copyright (c) 1996-1997 University of Twente.
# Copyright (c) 1997-1999 Technical University of Braunschweig.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# @(#) $Id: mib.test,v 1.1.1.1 2006/12/07 12:16:58 karl Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

package require Tnm 3.0
catch {
    namespace import Tnm::mib
}

set verbosity [configure -verbose]
configure -verbose {body error skip}

testConstraint knownBugMacOSX\
    [expr {!($::tcl_platform(os) eq "Darwin")}]


# The following MIB modules provide test cases and must be loaded
# in order to run the tests below.

lappend tnm(mibs) TUBS-SMI TUBS-IBR-TEST-MIB

test mib-3.1 {mib syntax} {
    list [catch {mib} msg] $msg
} {1 {wrong # args: should be "mib option ?arg arg ...?"}}
test mib-3.2 {mib syntax} {
    list [catch {mib foobar} msg] $msg
} {1 {bad option "foobar": must be access, children, compare, defval, description, displayhint, enums, exists, file, format, index, info, label, length, load, macro, member, module, name, oid, pack, parent, range, scan, size, split, status, subtree, syntax, type, unpack, variables, or walk}}
test mib-3.3 {mib syntax} {
    list [catch {mib foo bar} msg] $msg
} {1 {bad option "foo": must be access, children, compare, defval, description, displayhint, enums, exists, file, format, index, info, label, length, load, macro, member, module, name, oid, pack, parent, range, scan, size, split, status, subtree, syntax, type, unpack, variables, or walk}}

test mib-5.1 {mib macro} {
    list [catch {mib macro} msg] $msg
} {1 {wrong # args: should be "mib macro nodeOrType"}}
test mib-5.2 {mib macro} {
    list [catch {mib macro foo bar} msg] $msg
} {1 {wrong # args: should be "mib macro nodeOrType"}}
test mib-5.3 {mib macro} {
    mib macro SNMPv2-MIB::sysDescr
} {OBJECT-TYPE}
test mib-5.4 {mib macro} {
    mib macro SNMPv2-MIB::coldStart
} {NOTIFICATION-TYPE}
test mib-5.5 {mib macro} knownBug {
    mib macro SNMPv2-TC!DisplayString
} {TEXTUAL-CONVENTION}
test mib-5.6 {mib macro} {
    mib macro INTEGER
} {}
test mib-5.7 {mib macro} {
    mib macro TimeTicks
} {}

test mib-6.1 {mib module} {
    list [catch {mib module} msg] $msg
} {1 {wrong # args: should be "mib module nodeOrType"}}
test mib-6.2 {mib module} {
    list [catch {mib module foo bar} msg] $msg
} {1 {wrong # args: should be "mib module nodeOrType"}}
test mib-6.3 {mib module} {
    mib module SNMPv2-MIB::sysDescr
} {SNMPv2-MIB}
test mib-6.4 {mib module} {
    mib module 1.3.6.1.2.1.1.1
} {SNMPv2-MIB}
test mib-6.5 {mib module} {
    mib module IF-MIB::ifType
} {IF-MIB}
test mib-6.6 {mib module} {
    mib module 1.3.6.1.2.1.2.2.1.3
} {IF-MIB}
test mib-6.7 {mib module} {
    mib module 1.1
} {}

test mib-7.1 {mib format} {
    list [catch {mib format} msg] $msg
} {1 {wrong # args: should be "mib format nodeOrType value"}}
test mib-7.2 {mib format} {
    list [catch {mib format DisplayString} msg] $msg
} {1 {wrong # args: should be "mib format nodeOrType value"}}
test mib-7.3 {mib format} {
    list [catch {mib format DisplayString foo bar} msg] $msg
} {1 {wrong # args: should be "mib format nodeOrType value"}}
test mib-7.4 {mib format} {
    mib format IF-MIB!ifType 1
} {other}
test mib-7.5 {mib format} {
    mib format SNMPv2-MIB!sysDescr 41:42:43
} {ABC}
test mib-7.6 {mib format} {
    mib format DisplayString 41:42:43
} {ABC}
test mib-7.7 {mib format} {
    mib format SNMPv2-TC!DisplayString 41:42:43
} {ABC}
test mib-7.8 {mib format} {
    mib format SNMPv2-TC!DateAndTime 07:CC:06:06:13:0C:38:00
} {1996-6-6,19:12:56.0}
test mib-7.9 {mib format} {
    mib format SNMPv2-TC!DateAndTime 07:CC:06:06:13:0C:38:00:2B:02:00
} {1996-6-6,19:12:56.0,+2:0}
test mib-7.10 {mib format} {
    mib format OctalValue 12345
} {30071}
test mib-7.11 {mib format} {
    mib format OctalValue -12345
} {-30071}
test mib-7.12 {mib format} {
    mib format HexValue 12345
} {3039}
test mib-7.13 {mib format} {
    mib format HexValue -12345
} {-3039}
test mib-7.14 {mib format} knownBugMacOSX {
    mib format BinaryValue 12345
} {11000000111001}
test mib-7.15 {mib format} knownBugMacOSX {
    mib format BinaryValue -12345
} {-11000000111001}
test mib-7.16 {mib format} {
    mib format Dot3Value 12345
} {12.345}
test mib-7.17 {mib format} {
    mib format Dot3Value -12345
} {-12.345}
test mib-7.18 {mib format} {
    mib format Dot3Value 1
} {0.001}
test mib-7.19 {mib format} {
    mib format Dot3Value 100
} {0.100}
test mib-7.20 {mib format} {
    mib format NumValue 01:01:01
} {1-01-1}
test mib-7.21 {mib format} {
    mib format NumValue 08:08:08
} {8-08-10}
test mib-7.22 {mib format} {
    mib format NumValue 0C:0C:0C
} {12-0C-14}
test mib-7.23 {mib format} {
    mib format SNMPv2-TC!PhysAddress "00:D0:33:02:00:07"
} {00:D0:33:02:00:07}
test mib-7.24 {mib format} {
    mib format ATM-TC-MIB!AtmAddr "01020304"
} {01020304}

test mib-8.1 {mib scan} {
    list [catch {mib scan} msg] $msg
} {1 {wrong # args: should be "mib scan nodeOrType value"}}
test mib-8.2 {mib scan} {
    list [catch {mib scan DisplayString} msg] $msg
} {1 {wrong # args: should be "mib scan nodeOrType value"}}
test mib-8.3 {mib scan} {
    list [catch {mib scan DisplayString foo bar} msg] $msg
} {1 {wrong # args: should be "mib scan nodeOrType value"}}
test mib-8.4 {mib scan} {
    mib scan IF-MIB!ifType other
} {1}
test mib-8.5 {mib scan} {
    mib scan IfType other
} {1}
test mib-8.6 {mib scan} {
    mib scan IF-MIB!IfType other
} {1}
test mib-8.7 {mib scan} {
    mib scan SNMPv2-MIB!sysDescr ABC
} {41:42:43}
test mib-8.8 {mib scan} {
    mib scan DisplayString ABC
} {41:42:43}
test mib-8.9 {mib scan} {
    mib scan SNMPv2-TC!DisplayString ABC
} {41:42:43}
test mib-8.10 {mib scan} {
    mib scan SNMPv2-TC!DateAndTime "1996-6-6,19:12:56.0"
} {07:CC:06:06:13:0C:38:00}
test mib-8.11 {mib scan} {
    mib scan SNMPv2-TC!DateAndTime "1996-6-6,19:12:56.0,+2:0"
} {07:CC:06:06:13:0C:38:00:2B:02:00}
test mib-8.12 {mib scan} {
    mib scan OctalValue 30071
} {12345}
test mib-8.13 {mib scan} {
    mib scan OctalValue -30071
} {-12345}
test mib-8.14 {mib scan} {
    mib scan HexValue 3039
} {12345}
test mib-8.15 {mib scan} {
    mib scan HexValue -3039
} {-12345}
test mib-8.16 {mib scan} {
    mib scan BinaryValue 11000000111001
} {12345}
test mib-8.17 {mib scan} {
    mib scan BinaryValue -11000000111001
} {-12345}
test mib-8.18 {mib scan} {
    mib scan Dot3Value 12.345
} {12345}
test mib-8.19 {mib scan} {
    mib scan Dot3Value -12.345
} {-12345}
test mib-8.20 {mib scan} {
    mib scan Dot3Value 0.001
} {1}
test mib-8.21 {mib scan} {
    mib scan Dot3Value 0.1
} {100}
test mib-8.22 {mib scan} {
    mib scan Dot3Value 0.1234
} {123}
test mib-8.23 {mib scan} {
    mib scan NumValue "1-1-1-1"
} {01:01:01:01}
test mib-8.24.0 {mib scan} {
    mib scan NumValue "8-8-10-1"
} {08:08:08:01}
test mib-8.24.1 {mib scan} {
    mib scan NumValue "8-8-10-10"
} {08:08:08:02}
test mib-8.24.2 {mib scan} {
    mib scan NumValue "8-8-10-100"
} {08:08:08:04}
test mib-8.24.3 {mib scan} {
    mib scan NumValue "8-8-10-1000"
} {08:08:08:08}
test mib-8.24.4 {mib scan} {
    mib scan NumValue "8-8-10-1-10-100-1000"
} {08:08:08:01:02:04:08}
test mib-8.25.0 {mib scan} {
    mib scan NumValue "12-C-14-1100"
} {0C:0C:0C:0C}
test mib-8.25.1 {mib scan} {
    mib scan NumValue "12-C-14-1100-1"
} {0C:0C:0C:0C:01}
test mib-8.25.2 {mib scan} {
    mib scan NumValue "12-C-14-1100-10"
} {0C:0C:0C:0C:02}
test mib-8.25.3 {mib scan} {
    mib scan NumValue "12-C-14-1100-010"
} {0C:0C:0C:0C:02}
test mib-8.26 {mib scan} {
    mib scan SNMPv2-TC!PhysAddress "00:D0:33:02:00:07"
} {00:D0:33:02:00:07}

test mib-9.1 {mib parser} knownBug {
    mib walk x [mib oid 1.3] {
	set syntax [mib syntax $x]
	set access [mib access $x]
	if {$syntax == "59"} {
	    puts $::tcltest::errorChannel "Warning: [mib name $x] has unknown syntax $syntax."
	}
	if {[string match SEQUENCE* $syntax] && ($access != "not-accessible")} {
	    puts $::tcltest::errorChannel "Warning: [mib name $x] has wrong access mode $access."
	}
    }
} {}
test mib-9.2 {mib parser} knownBug {
    mib walk x 1.3 {
	set macro [mib macro $x]
	if {$macro == "OBJECT-TYPE"} {
	    set sntx [mib syntax $x]
	    if {[lsearch [Tnm::snmp info types] $sntx] < 0} {
		puts $::tcltest::errorChannel "Warning: [mib name $x] has unknown SNMP syntax $sntx."
	    }
	}
    }
} {}

test mib-10.1 {mib compare} {
    list [catch {mib compare 1} msg] $msg
} {1 {wrong # args: should be "mib compare oid1 oid2"}}
test mib-10.2 {mib compare} {
    list [catch {mib compare 1 2 3} msg] $msg
} {1 {wrong # args: should be "mib compare oid1 oid2"}}
test mib-10.3 {mib compare} {
    list [catch {mib compare **** 1.2.3.4} msg] $msg
} {1 {invalid object identifier "****"}}
test mib-10.4 {mib compare} {
    list [catch {mib compare 1.2.3.4 ****} msg] $msg
} {1 {invalid object identifier "****"}}
test mib-10.5 {mib compare} {
    mib compare 1.1 1.1
} {0}
test mib-10.6 {mib compare} {
    mib compare 1.1 1.2
} {-1}
test mib-10.7 {mib compare} {
    mib compare 1.2 1.1
} {1}
test mib-10.8 {mib compare} {
    mib compare 1.2.3.4.5 1.2.3.4.5.6
} {-1}
test mib-10.9 {mib compare} {
    mib compare 1.2.3.4.5.6 1.2.3.4.5
} {1}
test mib-10.10 {mib compare} {
    mib compare 1.2.3.4.5 1.2.3.5.4
} {-1}
test mib-10.11 {mib compare} {
    mib compare 1.2.3.5.4 1.2.3.4.5
} {1}
test mib-10.12 {mib compare} {
    mib compare SNMPv2-MIB!sysDescr 1.3.6.1.2.1.1.1
} {0}

test mib-11.1 {mib exists} {
    list [catch {mib exists} msg] $msg
} {1 {wrong # args: should be "mib exists nodeOrType"}}
test mib-11.2 {mib exists} {
    list [catch {mib exists foo bar} msg] $msg
} {1 {wrong # args: should be "mib exists nodeOrType"}}
test mib-11.3 {mib exists} {
    mib exists foo
} {0}
test mib-11.4 {mib exists} {
    mib exists sysDescr
} {1}
test mib-11.5 {mib exists} {
    mib exists SNMPv2-MIB!sysDescr
} {1}
test mib-11.6 {mib exists} {
    mib exists DisplayString
} {1}
test mib-11.7 {mib exists} {
    mib exists SNMPv2-TC!DisplayString
} {1}
test mib-11.8 {mib exists} {
    mib exists IfType
} {1}
test mib-11.9 {mib exists} {
    mib exists IF-MIB!IfType
} {1}
test mib-11.10 {mib exists} {
    mib exists INTEGER
} {1}
test mib-11.11 {mib exists} {
    mib exists TimeTicks
} {1}

test mib-12.1 {mib label} {
    list [catch {mib label} msg] $msg
} {1 {wrong # args: should be "mib label nodeOrType"}}
test mib-12.2 {mib label} {
    list [catch {mib label foo bar} msg] $msg
} {1 {wrong # args: should be "mib label nodeOrType"}}
test mib-12.3 {mib label} {
    mib label SNMPv2-MIB!sysDescr.0
} {sysDescr}
test mib-12.4 {mib label} {
    mib label system.1.0
} {sysDescr}
test mib-12.5 {mib label} {
    mib label SNMPv2-TC!DisplayString
} {DisplayString}
test mib-12.6 {mib label} {
    mib label DisplayString
} {DisplayString}

test mib-13.1 {mib split} {
    list [catch {mib split} msg] $msg
} {1 {wrong # args: should be "mib split oid"}}
test mib-13.2 {mib split} {
    list [catch {mib split foo bar} msg] $msg
} {1 {wrong # args: should be "mib split oid"}}
test mib-13.3 {mib split} {
    mib split SNMPv2-MIB!sysDescr.0
} {1.3.6.1.2.1.1.1 0}
test mib-13.4 {mib split} {
    mib split system.1.0
} {1.3.6.1.2.1.1.1 0}
test mib-13.5 {mib split} {
    mib split 1.3.6.1.2.1.6.13.1.5.194.45.135.3.1023.194.45.135.28.22
} {1.3.6.1.2.1.6.13.1.5 194.45.135.3.1023.194.45.135.28.22}
test mib-13.6 {mib split} {
    mib split SNMPv2-MIB!system
} {}

test mib-14.1 {mib file} {
    list [catch {mib file} msg] $msg
} {1 {wrong # args: should be "mib file nodeOrType"}}
test mib-14.2 {mib file} {
    list [catch {mib file foo bar} msg] $msg
} {1 {wrong # args: should be "mib file nodeOrType"}}
test mib-14.3 {mib file} {
    file tail [mib file SNMPv2-MIB!sysDescr]
} {SNMPv2-MIB}
test mib-14.4 {mib file} {
    file tail [mib file SNMPv2-TC!DisplayString]
} {SNMPv2-TC}
test mib-14.5 {mib file} {
    mib file INTEGER
} {}
test mib-14.6 {mib file} {
    mib file TimeTicks
} {}

test mib-15.1 {mib parent} {
    list [catch {mib parent} msg] $msg
} {1 {wrong # args: should be "mib parent node"}}
test mib-15.2 {mib parent} {
    list [catch {mib parent foo bar} msg] $msg
} {1 {wrong # args: should be "mib parent node"}}
test mib-15.3 {mib parent} {
    mib parent 1.3.6.1.2.1.1.1
} {1.3.6.1.2.1.1}
test mib-15.4 {mib parent} knownBug {
    mib parent SNMPv2-MIB!system
} {SNMPv2-SMI!mib-2}

test mib-16.1 {mib type} {
    list [catch {mib type} msg] $msg
} {1 {wrong # args: should be "mib type node"}}
test mib-16.2 {mib type} {
    list [catch {mib type foo bar} msg] $msg
} {1 {wrong # args: should be "mib type node"}}
test mib-16.3 {mib type} {
    mib type IF-MIB!ifType
} {IANAifType-MIB!IANAifType}
test mib-16.4 {mib type} knownBug {
    mib type SNMPv2-MIB!sysDescr
} {SNMPv2-TC!DisplayString}
test mib-16.5 {mib type} {
    mib type SNMPv2-MIB!sysUpTime
} {TimeTicks}
test mib-16.6 {mib type} {
    mib type SNMPv2-MIB!system
} {}

test mib-17.1 {mib index} {
    list [catch {mib index} msg] $msg
} {1 {wrong # args: should be "mib index node"}}
test mib-17.2 {mib index} {
    list [catch {mib index foo bar} msg] $msg
} {1 {wrong # args: should be "mib index node"}}
test mib-17.3 {mib index} {
    mib index ifTable
} {1.3.6.1.2.1.2.2.1.1}
test mib-17.4 {mib index} {
    mib index ifEntry
} {1.3.6.1.2.1.2.2.1.1}
test mib-17.5 {mib index} {
    mib index ifType
} {1.3.6.1.2.1.2.2.1.1}
test mib-17.6 {mib index} {
    mib index ifXTable
} {1.3.6.1.2.1.2.2.1.1}
test mib-17.7 {mib index} {
    mib index ifXEntry
} {1.3.6.1.2.1.2.2.1.1}
test mib-17.7 {mib index} {
    mib index ifAlias
} {1.3.6.1.2.1.2.2.1.1}

test mib-18.1 {mib enums} {
    list [catch {mib enums} msg] $msg
} {1 {wrong # args: should be "mib enums type ?varName?"}}
test mib-18.2 {mib enums} {
    list [catch {mib enums foo bar baz} msg] $msg
} {1 {wrong # args: should be "mib enums type ?varName?"}}
test mib-18.3 {mib enums} {
    mib enums SNMPv2-TC!RowStatus
} {active 1 notInService 2 notReady 3 createAndGo 4 createAndWait 5 destroy 6}
test mib-18.4 {mib enums} {
    set result 0
    set type IF-MIB!IfType
    foreach {label number} [mib enums $type] {
	set l [mib format $type $number]
	set n [mib scan $type $label]
	set result [expr $result + abs([string compare $n $number]) \
		+ abs([string compare $l $label])]
    }
    set result
} {0}
test mib-18.5 {mib enums} {
    mib enums SNMPv2-TC!DisplayString
} {}
test mib-18.3 {mib enums} {
    mib enums SNMPv2-TC!RowStatus
} {active 1 notInService 2 notReady 3 createAndGo 4 createAndWait 5 destroy 6}
test mib-18.4 {mib enums} {
    set result 0
    set type IF-MIB!IfType
    foreach {label number} [mib enums $type] {
	set l [mib format $type $number]
	set n [mib scan $type $label]
	set result [expr $result + abs([string compare $n $number]) \
		+ abs([string compare $l $label])]
    }
    set result
} {0}
test mib-18.5 {mib enums} {
    mib enums SNMPv2-TC!DisplayString
} {}
test mib-18.6 {mib enums} {
    catch {unset xx}
    list [mib enums SNMPv2-TC!RowStatus xx] $xx
} {1 {active 1 notInService 2 notReady 3 createAndGo 4 createAndWait 5 destroy 6}}
test mib-18.7 {mib enums} {
    mib enums SNMPv2-TC!DisplayString xx
} {0}

test mib-19.1 {mib displayhint} {
    list [catch {mib displayhint} msg] $msg
} {1 {wrong # args: should be "mib displayhint type ?varName?"}}
test mib-19.2 {mib displayhint} {
    list [catch {mib displayhint foo bar baz} msg] $msg
} {1 {wrong # args: should be "mib displayhint type ?varName?"}}
test mib-19.3 {mib displayhint} {
    mib displayhint SNMPv2-TC!DisplayString
} {255a}
test mib-19.4 {mib displayhint} {
    mib displayhint SNMPv2-TC!DateAndTime
} {2d-1d-1d,1d:1d:1d.1d,1a1d:1d}
test mib-19.5 {mib displayhint} {
    mib displayhint SNMPv2-TC!RowStatus
} {}
test mib-19.6 {mib displayhint} {
    catch {unset xx}
    list [mib displayhint SNMPv2-TC!DisplayString xx] $xx
} {1 255a}
test mib-19.7 {mib displayhint} {
    catch {unset xx}
    list [mib displayhint SNMPv2-TC!DateAndTime xx] $xx
} {1 2d-1d-1d,1d:1d:1d.1d,1a1d:1d}
test mib-19.8 {mib displayhint} {
    catch {unset xx}
    mib displayhint SNMPv2-TC!RowStatus xx
} {0}

test mib-20.1 {mib length} {
    list [catch {mib length} msg] $msg
} {1 {wrong # args: should be "mib length oid"}}
test mib-20.2 {mib length} {
    list [catch {mib length foo bar} msg] $msg
} {1 {wrong # args: should be "mib length oid"}}
test mib-20.3 {mib length} {
    mib length 1.2.3.4.5.6.7.8.9.0
} {10}
test mib-20.4 {mib length} {
    mib length 1.2.3.4.5.6.7.8.9.0.1.2.3.4.5.6
} {16}
test mib-20.5 {mib length} {
    mib length 1.2.3.4.5.6.7.8.9.0.1.2.3.4.5.6.7
} {17}
test mib-20.6 {mib length} {
    mib length [mib oid SNMPv2-MIB!sysDescr.0]
} {9}
test mib-20.7 {mib length} {
    mib length SNMPv2-MIB!sysDescr.0
} {9}

test mib-21.1 {mib walk} {
    list [catch {mib walk} msg] $msg
} {1 {wrong # args: should be "mib walk varName node command"}}
test mib-21.2 {mib walk} {
    list [catch {mib walk x} msg] $msg
} {1 {wrong # args: should be "mib walk varName node command"}}
test mib-21.3 {mib walk} {
    list [catch {mib walk x y z foo} msg] $msg
} {1 {wrong # args: should be "mib walk varName node command"}}
test mib-21.4 {mib walk} {
    unset result
    mib walk x [mib oid SNMPv2-MIB!sysDescr] { lappend result $x}
    set result
} {1.3.6.1.2.1.1.1}
test mib-21.5 {mib walk} {
    unset result
    mib walk x [mib oid SNMPv2-MIB!sysDescr.0] { lappend result $x}
    set result
} {1.3.6.1.2.1.1.1}
test mib-21.6 {mib walk} knownBug {
    unset result
    mib walk x [mib oid SNMPv2-MIB!system] { lappend result [mib label $x]}
    set result
} {system sysDescr sysObjectID sysUpTime sysContact sysName sysLocation sysServices sysORLastChange sysORTable sysOREntry sysORIndex sysORID sysORDescr sysORUpTime}

test mib-22.1 {mib description} {
    list [catch {mib description} msg] $msg
} {1 {wrong # args: should be "mib description nodeOrType ?varName?"}}
test mib-22.2 {mib description} {
    list [catch {mib description foo bar baz} msg] $msg
} {1 {wrong # args: should be "mib description nodeOrType ?varName?"}}
test mib-22.3 {mib description} {
    mib description SNMPv2-MIB!sysUpTime
} {The time (in hundredths of a second) since the network
management portion of the system was last re-initialized.}
test mib-22.4 {mib description} {
    mib description SNMPv2-MIB!PhysAddress
} {Represents media- or physical-level addresses.}
test mib-22.5 {mib description} {
    mib description IP-MIB!IpForwarding
} {}
test mib-22.6 {mib description} {
    string length [mib description SNMPv2-MIB!sysDescr]
} {187}
test mib-22.7 {mib description} {
    mib description SNMPv2-MIB!system
} {}
test mib-22.8 {mib description} {
    catch {unset xx}
    list [mib description SNMPv2-MIB!sysUpTime xx] $xx
} {1 {The time (in hundredths of a second) since the network
management portion of the system was last re-initialized.}}
test mib-22.9 {mib description} {
    catch {unset xx}
    list [mib description SNMPv2-MIB!PhysAddress xx] $xx
} {1 {Represents media- or physical-level addresses.}}
test mib-22.10 {mib description} {
    catch {unset xx}
    mib description IP-MIB!IpForwarding xx
} {0}
test mib-22.11 {mib description} {
    catch {unset xx}
    mib description SNMPv2-MIB!system xx
} {0}
test mib-22.12 {mib description} {
    catch {unset xx}
    set xx(yy) zz
    list [catch {mib description SNMPv2-MIB!PhysAddress xx} msg] $msg
} {1 {can't set "xx": variable is array}}

test mib-23.1 {mib status} {
    list [catch {mib status} msg] $msg
} {1 {wrong # args: should be "mib status nodeOrType"}}
test mib-23.2 {mib status} {
    list [catch {mib status foo bar} msg] $msg
} {1 {wrong # args: should be "mib status nodeOrType"}}
test mib-23.3 {mib status} {
   list [catch {mib status foobar} msg] $msg
} {1 {unknown MIB node or type "foobar"}}
test mib-23.4 {mib status} {
    mib status SNMPv2-TC!AutonomousType
} {current}
test mib-23.5 {mib status} {
    mib status SNMPv2-TC!InstancePointer
} {obsolete}
test mib-23.6 {mib status} {
    mib status SNMPv2-MIB!sysDescr
} {current}
test mib-23.7 {mib status} {
    mib status RFC1213-MIB!atTable
} {deprecated}
test mib-23.8 {mib status} {
    mib status IP-MIB!ipInReceives
} {current}

test mib-24.1 {mib info} {
    list [catch {mib info} msg] $msg
} {1 {wrong # args: should be "mib info subject ?pattern?"}}
test mib-24.2 {mib info} {
    list [catch {mib info foo bar baz} msg] $msg
} {1 {wrong # args: should be "mib info subject ?pattern?"}}
test mib-24.3 {mib info} {
    list [catch {mib info foo} msg] $msg
} {1 {bad option "foo": must be access, files, macros, modules, status, or types}}
test mib-24.4 {mib info} {
    lsort [mib info types SNMPv2-TC!R*]
} {SNMPv2-TC!RowPointer SNMPv2-TC!RowStatus}
test mib-24.5 {mib info} {
    mib info access
} {not-accessible read-only read-create read-write accessible-for-notify}
test mib-24.6 {mib info} {
    mib info access *read*
} {read-only read-create read-write}
test mib-24.7 {mib info} {
    mib info status
} {current deprecated obsolete}
test mib-24.8 {mib info} {
    mib info status *o*
} {obsolete}
test mib-24.9 {mib info} {
    mib info macros
} {OBJECT-TYPE OBJECT-IDENTITY MODULE-IDENTITY NOTIFICATION-TYPE TRAP-TYPE OBJECT-GROUP NOTIFICATION-GROUP MODULE-COMPLIANCE AGENT-CAPABILITIES TEXTUAL-CONVENTION TYPE-ASSIGNEMENT VALUE-ASSIGNEMENT}
test mib-24.10 {mib info} {
    mib info macros *OBJECT*
} {OBJECT-TYPE OBJECT-IDENTITY OBJECT-GROUP}
test mib-24.11 {mib info} {
    mib info files *SMI
} {RFC1155-SMI SNMPv2-SMI TUBS-SMI}

test mib-25.1 {mib subtree} {
    list [catch {mib subtree 1} msg] $msg
} {1 {wrong # args: should be "mib subtree oid1 oid2"}}
test mib-25.2 {mib subtree} {
    list [catch {mib subtree 1 2 3} msg] $msg
} {1 {wrong # args: should be "mib subtree oid1 oid2"}}
test mib-25.3 {mib subtree} {
    list [catch {mib subtree **** 1.2.3.4} msg] $msg
} {1 {invalid object identifier "****"}}
test mib-25.4 {mib subtree} {
    list [catch {mib subtree 1.2.3.4 ****} msg] $msg
} {1 {invalid object identifier "****"}}
test mib-25.5 {mib subtree} {
    mib subtree 1.1 1.1
} {1}
test mib-25.6 {mib subtree} {
    mib subtree 1.1 1.2
} {0}
test mib-25.7 {mib subtree} {
    mib subtree 1.2 1.1
} {0}
test mib-25.8 {mib subtree} {
    mib subtree 1.2.3.4.5 1.2.3.4.5.6
} {1}
test mib-25.9 {mib subtree} {
    mib subtree 1.2.3.4.5.6 1.2.3.4.5
} {0}
test mib-25.10 {mib subtree} {
    mib subtree 1.2.3.4.5 1.2.3.5.4
} {0}
test mib-25.11 {mib subtree} {
    mib subtree 1.2.3.5.4 1.2.3.4.5
} {0}
test mib-25.12 {mib subtree} {
    mib subtree SNMPv2-MIB!sysDescr 1.3.6.1.2.1.1.1
} {1}

test mib-26.1 {mib variables} {
    list [catch {mib variables} msg] $msg
} {1 {wrong # args: should be "mib variables node"}}
test mib-26.2 {mib variables} {
    list [catch {mib variables foo bar} msg] $msg
} {1 {wrong # args: should be "mib variables node"}}
test mib-26.3 {mib variables} {
    mib variables IF-MIB!linkUp
} {ifIndex ifAdminStatus ifOperStatus}
test mib-26.4 {mib variables} {
    mib variables SNMPv2-MIB!coldStart
} {}
test mib-26.5 {mib variables} {
    mib variables SNMPv2-MIB!sysDescr
} {}

test mib-27.1 {mib name} {
    list [catch {mib name} msg] $msg
} {1 {wrong # args: should be "mib name node"}}
test mib-27.2 {mib name} {
    list [catch {mib name foo bar} msg] $msg
} {1 {wrong # args: should be "mib name node"}}
test mib-27.3 {mib name} {
   list [catch {mib name "i n v a l i d"} msg] $msg
} {1 {unknown MIB node "i n v a l i d"}}
test mib-27.4 {mib name} {
   list [catch {mib name ""} msg] $msg
} {1 {unknown MIB node ""}}
test mib-27.5 {mib name} knownBug {
    mib name 1.3.6.1.2.1.1.1
} {SNMPv2-MIB!sysDescr}
test mib-27.6 {mib name} knownBug {
    mib name 1.3.6.1.2.1.1.1
} {SNMPv2-MIB!sysDescr}
test mib-27.7 {mib name} knownBug {
    mib name system.sysDescr
} {SNMPv2-MIB!sysDescr}
test mib-27.8 {mib name} knownBug {
    mib name system.sysDescr.0
} {SNMPv2-MIB!sysDescr.0}
test mib-27.9 {mib name} knownBug {
    mib name mib-2.1.sysDescr
} {SNMPv2-MIB!sysDescr}
test mib-27.10 {mib name} knownBug {
    mib name 1.3.6.1.2.1.1.1.0
} {SNMPv2-MIB!sysDescr.0}
test mib-27.11 {mib name} knownBug {
    mib name 1.3.6.1.2.1.4.21.1.7:86:A9:22:01
} {RFC1213-MIB!ipRouteNextHop.134.169.34.1}
test mib-27.12 {mib name} {
    mib oid 1.3.6.1.2.1.4.21.1.7:86:A9:22:01
} {1.3.6.1.2.1.4.21.1.7.134.169.34.1}
test mib-27.13 {mib name} {
    mib oid 1.3.6.1.4.1.0x627:74:75:62:73
} {1.3.6.1.4.1.1575.116.117.98.115}
test mib-27.14 {mib name} knownBug {
    mib name 1.3
} {RFC1155-SMI!org}
test mib-27.15 {mib name} {
    mib oid RFC1155-SMI!org
} {1.3}

test mib-28.1 {mib syntax} {
    list [catch {mib syntax} msg] $msg
} {1 {wrong # args: should be "mib syntax nodeOrType"}}
test mib-28.2 {mib syntax} {
    list [catch {mib syntax foo bar} msg] $msg
} {1 {wrong # args: should be "mib syntax nodeOrType"}}
test mib-28.3 {mib syntax} {
   list [catch {mib syntax foobar} msg] $msg
} {1 {unknown MIB node or type "foobar"}}
test mib-28.4 {mib syntax} {
    mib syntax 1.3.6.1.2.1.1.3
} {TimeTicks}
test mib-28.5 {mib syntax} {
    mib syntax sysServices
} {Integer32}
test mib-28.5 {mib syntax} {
    mib syntax SNMPv2-MIB!sysDescr.0
} {OCTET STRING}
test mib-28.5 {mib syntax} {
    mib syntax DisplayString
} {OCTET STRING}
test mib-28.5 {mib syntax} {
    mib syntax SNMPv2-MIB!sysObjectID
} {OBJECT IDENTIFIER}
test mib-28.5 {mib syntax} {
    mib syntax {OBJECT IDENTIFIER}
} {OBJECT IDENTIFIER}

test mib-29.1 {mib access} {
    list [catch {mib access} msg] $msg
} {1 {wrong # args: should be "mib access node ?varName?"}}
test mib-29.2 {mib access} {
    list [catch {mib access foo bar baz} msg] $msg
} {1 {wrong # args: should be "mib access node ?varName?"}}
test mib-29.3 {mib access} {
   list [catch {mib access foobar} msg] $msg
} {1 {unknown MIB node "foobar"}}
test mib-29.4 {mib access} {
    mib access SNMPv2-MIB!sysDescr
} {read-only}
test mib-29.5 {mib access} {
    mib access SNMPv2-MIB!sysContact
} {read-write}
test mib-29.6 {mib access} {
    mib access SNMPv2-MIB!snmpTrapOID
} {accessible-for-notify}
test mib-29.7 {mib access} {
    mib access 1.3.6
} {not-accessible}
test mib-29.8 {mib access} {
    catch {unset xx}
    list [mib access SNMPv2-MIB!sysDescr xx] $xx
} {1 read-only}
test mib-29.9 {mib access} {
    catch {unset xx}
    list [mib access SNMPv2-MIB!sysContact xx] $xx
} {1 read-write}
test mib-29.10 {mib access} {
    catch {unset xx}
    list [mib access SNMPv2-MIB!snmpTrapOID xx] $xx
} {1 accessible-for-notify}
test mib-29.11 {mib access} {
    catch {unset xx}
    list [mib access 1.3.6 xx] $xx
} {1 not-accessible}

test mib-30.1 {mib children} {
    list [catch {mib children} msg] $msg
} {1 {wrong # args: should be "mib children node ?varName?"}}
test mib-30.2 {mib children} {
    list [catch {mib children foo bar baz} msg] $msg
} {1 {wrong # args: should be "mib children node ?varName?"}}
test mib-30.3 {mib children} {
   list [catch {mib children foobar} msg] $msg
} {1 {unknown MIB node "foobar"}}
test mib-30.4 {mib children} knownBug {
    mib children SNMPv2-MIB!system
} {SNMPv2-MIB!sysDescr SNMPv2-MIB!sysObjectID SNMPv2-MIB!sysUpTime SNMPv2-MIB!sysContact SNMPv2-MIB!sysName SNMPv2-MIB!sysLocation SNMPv2-MIB!sysServices SNMPv2-MIB!sysORLastChange SNMPv2-MIB!sysORTable}
test mib-30.5 {mib children} {
    mib children SNMPv2-MIB!sysDescr
} {}
test mib-30.6 {mib children} knownBug {
    mib children IP-MIB!ipAddrTable
} {IP-MIB!ipAddrEntry}
test mib-30.7 {mib children} knownBug {
    mib children IP-MIB!ipAddrEntry
} {IP-MIB!ipAdEntAddr IP-MIB!ipAdEntIfIndex IP-MIB!ipAdEntNetMask IP-MIB!ipAdEntBcastAddr IP-MIB!ipAdEntReasmMaxSize}
test mib-30.8 {mib children} knownBug {
    catch {unset xx}
    list [mib children SNMPv2-MIB!system xx] $xx
} {9 {SNMPv2-MIB!sysDescr SNMPv2-MIB!sysObjectID SNMPv2-MIB!sysUpTime SNMPv2-MIB!sysContact SNMPv2-MIB!sysName SNMPv2-MIB!sysLocation SNMPv2-MIB!sysServices SNMPv2-MIB!sysORLastChange SNMPv2-MIB!sysORTable}}
test mib-30.9 {mib children} {
    catch {unset xx}
    list [mib children SNMPv2-MIB!sysDescr xx] $xx
} {0 {}}
test mib-30.10 {mib children} knownBug {
    catch {unset xx}
    list [mib children IP-MIB!ipAddrTable xx] $xx
} {1 IP-MIB!ipAddrEntry}
test mib-30.11 {mib children} knownBug {
    catch {unset xx}
    list [mib children IP-MIB!ipAddrEntry xx] $xx
} {5 {IP-MIB!ipAdEntAddr IP-MIB!ipAdEntIfIndex IP-MIB!ipAdEntNetMask IP-MIB!ipAdEntBcastAddr IP-MIB!ipAdEntReasmMaxSize}}

test mib-31.1 {mib oid} {
    list [catch {mib oid} msg] $msg
} {1 {wrong # args: should be "mib oid node"}}
test mib-31.2 {mib oid} {
    list [catch {mib oid foo bar} msg] $msg
} {1 {wrong # args: should be "mib oid node"}}
test mib-31.3 {mib oid} {
   list [catch {mib oid foobar} msg] $msg
} {1 {invalid object identifier "foobar"}}
test mib-31.4 {mib oid} {
    mib oid sysDescr
} {1.3.6.1.2.1.1.1}
test mib-31.4 {mib oid} {
    mib oid SNMPv2-MIB!sysDescr
} {1.3.6.1.2.1.1.1}
test mib-31.8 {mib oid} {
    mib oid system.sysDescr
} {1.3.6.1.2.1.1.1}
test mib-31.9 {mib oid} {
    mib oid system.sysDescr.0
} {1.3.6.1.2.1.1.1.0}
test mib-31.10 {mib oid} {
    mib oid mib-2.1.sysDescr
} {1.3.6.1.2.1.1.1}
test mib-31.11 {mib oid} {
    mib oid 1.3.6.1.2.1.1.1.0
} {1.3.6.1.2.1.1.1.0}
test mib-31.21 {mib oid} {
    set oid ""
    for {set i 0} {$i < 128} {incr i} { lappend oid 1 }
    set oid [join $oid .]
    string compare [mib oid $oid] $oid
} {0}
test mib-31.22 {mib oid} {
    set oid ""
    for {set i 0} {$i < 129} {incr i} { lappend oid 1 }
    set oid [join $oid .]
    catch {mib oid $oid}
} {1}
test mib-31.23 {mib oid} knownBug {
    set a [mib oid system]
    set b [mib name $a]
    set c [mib oid $b]
    list $a $b $c
} {1.3.6.1.2.1.1 SNMPv2-MIB!system 1.3.6.1.2.1.1}

test mib-32.1 {mib unpack} {
    list [catch {mib unpack} msg] $msg
} {1 {wrong # args: should be "mib unpack oid"}}
test mib-32.2 {mib unpack} {
    list [catch {mib unpack foo bar} msg] $msg
} {1 {wrong # args: should be "mib unpack oid"}}
test mib-32.3 {mib unpack} {
    list [catch {mib unpack foobar} msg] $msg
} {1 {unknown MIB node "foobar"}}
test mib-32.4 {mib unpack} {
    list [catch {mib unpack 1.3.6} msg] $msg
} {1 {no object type definition for "1.3.6"}}
test mib-32.5 {mib unpack} {
    list [catch {mib unpack SNMPv2-MIB!sysDescr} msg] $msg
} {1 {no columnar object type "SNMPv2-MIB!sysDescr"}}
test mib-32.6 {mib unpack} {
    mib unpack IF-MIB!ifType.4
} {4}
test mib-32.7 {mib unpack} {
    list [catch {mib unpack IF-MIB!ifType} msg] $msg
} {1 {illegal length of the instance identifier}}
test mib-32.8 {mib unpack} {
    list [catch {mib unpack IF-MIB!ifType.4.5} msg] $msg
} {1 {trailing subidentifier in the instance identifier}}
test mib-32.9 {mib unpack} {
    mib unpack TCP-MIB!tcpConnState.1.2.3.4.42.5.6.7.8.55
} {1.2.3.4 42 5.6.7.8 55}
test mib-32.10 {mib unpack} {
    list [catch {mib unpack TCP-MIB!tcpConnState.1.2.3.4.42} msg] $msg
} {1 {illegal length of the instance identifier}}
test mib-32.11 {mib unpack} {
    list [catch {mib unpack TCP-MIB!tcpConnState.1.2.3.4.42.1.2.3.4.55.1} msg] $msg
} {1 {trailing subidentifier in the instance identifier}}
test mib-32.12 {mib unpack} {
    mib unpack 1.3.6.1.2.1.16.16.1.1.2.1.28274855.68.4.158.101.121.7.96
} {1 28274855 68 9E:65:79:07 96}

test mib-33.1 {mib pack} {
    list [catch {mib pack} msg] $msg
} {1 {wrong # args: should be "mib pack oid value ?value ...?"}}
test mib-33.2 {mib pack} {
    list [catch {mib pack IF-MIB!ifType} msg] $msg
} {1 {wrong # args: should be "mib pack oid value ?value ...?"}}
test mib-33.3 {mib pack} {
    list [catch {mib pack foobar barfoo} msg] $msg
} {1 {unknown MIB node "foobar"}}
test mib-33.4 {mib pack} {
    list [catch {mib pack SNMPv2-MIB!sysDescr foobar} msg] $msg
} {1 {no columnar object type "SNMPv2-MIB!sysDescr"}}
test mib-33.6 {mib pack} {
    mib pack IF-MIB!ifType 4
} {1.3.6.1.2.1.2.2.1.3.4}
test mib-33.8 {mib pack} {
    list [catch {mib pack IF-MIB!ifType 4 5} msg] $msg
} {1 {number of arguments does not match the number of index components}}
test mib-33.9 {mib pack} {
    mib pack TCP-MIB!tcpConnState 1.2.3.4 42 5.6.7.8 55
} {1.3.6.1.2.1.6.13.1.1.1.2.3.4.42.5.6.7.8.55}
test mib-33.10 {mib pack} {
    list [catch {mib pack TCP-MIB!tcpConnState 1.2.3.4 42} msg] $msg
} {1 {number of arguments does not match the number of index components}}
test mib-33.11 {mib pack} {
    list [catch {mib pack TCP-MIB!tcpConnState 1.2.3.4 42 1.2.3.4 55 1} msg] $msg
} {1 {number of arguments does not match the number of index components}}
test mib-33.12 {mib pack} {
    mib pack vacmAccessStatus group prefix 3 noAuthNoPriv
} {1.3.6.1.6.3.16.1.4.1.9.5.103.114.111.117.112.6.112.114.101.102.105.120.3.1}
test mib-33.13 {mib pack} {
    mib pack snmpNotifyTag foo
} {1.3.6.1.6.3.13.1.1.1.2.102.111.111}
test mib-33.14 {mib pack} {
    mib pack snmpNotifyFilterMask foo SNMPv2-MIB!system
} {1.3.6.1.6.3.13.1.3.1.2.3.102.111.111.1.3.6.1.2.1.1}
test mib-33.15 {mib pack} {
    mib pack RMON2-MIB!alHostInPkts 1 28274855 68 9E:65:79:07 96
} {1.3.6.1.2.1.16.16.1.1.2.1.28274855.68.4.158.101.121.7.96}

test mib-34.1 {mib member} {
    list [catch {mib member} msg] $msg
} {1 {wrong # args: should be "mib member node"}}
test mib-34.2 {mib member} {
    list [catch {mib member foo bar} msg] $msg
} {1 {wrong # args: should be "mib member node"}}
test mib-34.3 {mib member} {
    mib member SNMPv2-MIB!snmpGroup
} {snmpInPkts snmpInBadVersions snmpInASNParseErrs snmpSilentDrops snmpProxyDrops snmpEnableAuthenTraps}
test mib-34.4 {mib member} {
    mib member SNMPv2-MIB!snmpBasicNotificationsGroup
} {coldStart authenticationFailure}
test mib-34.5 {mib member} {
    mib member SNMPv2-MIB!sysDescr
} {}

test mib-35.1 {mib defval} {
    list [catch {mib defval} msg] $msg
} {1 {wrong # args: should be "mib defval node ?varName?"}}
test mib-35.2 {mib defval} {
    list [catch {mib defval foo bar baz} msg] $msg
} {1 {wrong # args: should be "mib defval node ?varName?"}}
test mib-35.3 {mib defval} {
    mib defval vacmSecurityToGroupStorageType
} {nonVolatile}
test mib-35.4 {mib defval} {
    mib defval vacmAccessReadViewName
} {}
test mib-35.5 {mib defval} {
    mib defval system
} {}
test mib-35.6 {mib defval} {
    catch {unset xx}
    list [mib defval vacmSecurityToGroupStorageType xx] $xx
} {1 nonVolatile}
test mib-35.7 {mib defval} {
    catch {unset xx}
    list [mib defval vacmAccessReadViewName xx] $xx
} {1 {}}
test mib-35.8 {mib defval} {
    catch {unset xx}
    mib defval system xx
} {0}
test mib-35.9 {mib defval} {
    catch {unset xx}
    set xx(yy) zz
    list [catch {mib defval vacmSecurityToGroupStorageType xx} msg] $msg
} {1 {can't set "xx": variable is array}}

test mib-36.1 {mib range} {
    list [catch {mib range} msg] $msg
} {1 {wrong # args: should be "mib range type"}}
test mib-36.2 {mib range} {
    list [catch {mib range foo bar} msg] $msg
} {1 {wrong # args: should be "mib range type"}}
test mib-36.3 {mib range} {
    mib range SNMPv2-TC!TestAndIncr
} {0 2147483647}
test mib-36.4 {mib range} {
    mib range SNMPv2-TC!TimeInterval
} {0 2147483647}


test mib-37.1 {mib size} {
    list [catch {mib size} msg] $msg
} {1 {wrong # args: should be "mib size type"}}
test mib-37.2 {mib size} {
    list [catch {mib size foo bar} msg] $msg
} {1 {wrong # args: should be "mib size type"}}
test mib-37.3 {mib size} {
    mib size SNMPv2-TC!DisplayString
} {0 255}
test mib-37.4 {mib size} knownBug {
    mib size SNMPv2-TC!MacAddress
} {6 6}
test mib-37.5 {mib size} {
    mib size SNMPv2-TC!DateAndTime
} {8 8 11 11}


::tcltest::cleanupTests
configure -verbose $verbosity
return
