# Commands covered:  sunrpc				-*- tcl -*-
#
# This file contains a collection of tests for one or more of the Tnm
# commands. Sourcing this file into scotty runs the tests and generates
# output for errors.  No output means no errors were found.
#
# Copyright (c) 1994-1996 Technical University of Braunschweig.
# Copyright (c) 1996-1997 University of Twente.
# Copyright (c) 1997-1998 Technical University of Braunschweig.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# @(#) $Id: sunrpc.test,v 1.1.1.1 2006/12/07 12:16:58 karl Exp $

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2
    namespace import ::tcltest::*
}

testConstraint runWithEvilCatchCrash 0

configure -verbose {body error skip}

package require Tnm 3.0
catch {
    namespace import Tnm::sunrpc
}

#set target localhost
set target $tnm(host)

testConstraint rpcServerAvailable \
    [expr {! [catch {sunrpc info $target}]}]

proc running {target service} {
    foreach {number version proto port name} [join [sunrpc info $target]] {
	if {[string equal $name $service]} {
	    return 1
	}
    }
    return 0
}

if {[testConstraint rpcServerAvailable]} {
    testConstraint etherdAvailable \
	[running $target "etherd"]
    testConstraint mountdAvailable \
	[running $target "mountd"]
    testConstraint rstatdAvailable \
	[running $target "rstatd"]
}

test sunrpc-1.1 {sunrpc command} {
    list [catch {sunrpc} msg] $msg
} {1 {wrong # args: should be "sunrpc option host ?args?"}}
test sunrpc-1.2 {sunrpc command} -constraints {
} -body {
    catch {bad workaround}
    sunrpc foo
} -returnCodes 1 \
    -result {bad option "foo": must be ether, exports, info, mount, pcnfs, probe, or stat}
#  -errorOutput \
    {bad option "foo": must be ether, exports, info, mount, pcnfs, probe, or stat}

test sunrpc-2.1 {sunrpc ether commands} runWithEvilCatchCrash {
    list [catch {sunrpc ether} msg] $msg
} {1 {wrong # args: should be "sunrpc ether host option"}}
test sunrpc-2.2 {sunrpc ether commands} {
    global target
    list [catch {sunrpc ether $target} msg] $msg
} {1 {wrong # args: should be "sunrpc ether host option"}}
test sunrpc-2.3 {sunrpc ether commands} {
    global target
    list [catch {sunrpc ether $target foo} msg] $msg
} {1 {bad option "foo": must be open, close, or stat}}
test sunrpc-2.4 {sunrpc ether commands} {
    global target
    list [catch {sunrpc ether $target stat foo} msg] $msg
} {1 {wrong # args: should be "sunrpc ether host option"}}
test sunrpc-2.5 {sunrpc ether command} {
    list [catch {sunrpc ether !@#$% stat} msg] $msg
} {1 {illegal IP address or name "!@#$%"}}
test sunrpc-2.6 {sunrpc ether command} \
    -constraints etherdAvailable -body {
    global target
    set stats {}
    sunrpc ether $target open
    set stats [sunrpc ether $target stat]
    sunrpc ether $target close
    expr [llength $stats] % 3
} -result {0}

test sunrpc-3.1 {sunrpc exports command} runWithEvilCatchCrash {
    list [catch {sunrpc exports} msg] $msg
} {1 {wrong # args: should be "sunrpc exports host"}}
test sunrpc-3.2 {sunrpc exports command} {
    global target
    list [catch {sunrpc exports $target foo} msg] $msg
} {1 {wrong # args: should be "sunrpc exports host"}}
test sunrpc-3.3 {sunrpc exports command} {
    list [catch {sunrpc exports !@#$%} msg] $msg
} {1 {illegal IP address or name "!@#$%"}}
test sunrpc-3.4 {sunrpc exports command} mountdAvailable {
    global target
    set exports [sunrpc exports $target]
    expr [llength $exports] % 2
} {0}

test sunrpc-4.1 {sunrpc info command} runWithEvilCatchCrash {
    list [catch {sunrpc info} msg] $msg
} {1 {wrong # args: should be "sunrpc info host"}}
test sunrpc-4.2 {sunrpc info command} {
    global target
    list [catch {sunrpc info $target foo} msg] $msg
} {1 {wrong # args: should be "sunrpc info host"}}
test sunrpc-4.3 {sunrpc info command} {
    list [catch {sunrpc info !@#$%} msg] $msg
} {1 {illegal IP address or name "!@#$%"}}
test sunrpc-4.4 {sunrpc info command} rpcServerAvailable {
    global target
    catch {sunrpc info $target}
} {0}
test sunrpc-4.5 {sunrpc info command} rpcServerAvailable {
    global target
    expr {[llength [sunrpc info $target]] > 0}
} {1}
# account for version 2 and version 4 of portmapper
test sunrpc-4.6 {sunrpc info command} -constraints {
    rpcServerAvailable
} -body {
    global target
    set number {}
    foreach {number version proto port name} [join [sunrpc info $target]] {
	if {[string equal $name "portmapper"]} {
	    break
	}
    }
    list $number $version $name
} -match regexp -result {100000 [24] portmapper}

test sunrpc-5.1 {sunrpc mount command} runWithEvilCatchCrash {
    list [catch {sunrpc mount} msg] $msg
} {1 {wrong # args: should be "sunrpc mount host"}}
test sunrpc-5.2 {sunrpc mount command} {
    global target
    list [catch {sunrpc mount $target foo} msg] $msg
} {1 {wrong # args: should be "sunrpc mount host"}}
test sunrpc-5.3 {sunrpc mount command} {
    list [catch {sunrpc mount !@#$%} msg] $msg
} {1 {illegal IP address or name "!@#$%"}}
test sunrpc-5.4 {sunrpc mount command} mountdAvailable {
    global target
    set mounts [sunrpc mount $target]
    expr [llength $mounts] % 2
} {0}

test sunrpc-6.1 {sunrpc pcnfs command} runWithEvilCatchCrash {
    list [catch {sunrpc pcnfs} msg] $msg
} {1 {wrong # args: should be "sunrpc pcnfs host option"}}
test sunrpc-6.2 {sunrpc pcnfs command} {
    global target
    list [catch {sunrpc pcnfs $target} msg] $msg
} {1 {wrong # args: should be "sunrpc pcnfs host option"}}
test sunrpc-6.3 {sunrpc pcnfs command} {
    global target
    list [catch {sunrpc pcnfs $target foo} msg] $msg
} {1 {bad option "foo": must be info, list, queue, or status}}
test sunrpc-6.4 {sunrpc pcnfs command} {
    global target
    list [catch {sunrpc pcnfs $target info foo bar} msg] $msg
} {1 {wrong # args: should be "sunrpc pcnfs host info ?arrayName?"}}
test sunrpc-6.5 {sunrpc pcnfs command} {
    global target
    list [catch {sunrpc pcnfs $target list foo bar} msg] $msg
} {1 {wrong # args: should be "sunrpc pcnfs host list ?arrayName?"}}
test sunrpc-6.6 {sunrpc pcnfs command} {
    global target
    list [catch {sunrpc pcnfs $target queue foo bar baz} msg] $msg
} {1 {wrong # args: should be "sunrpc pcnfs host queue printer ?arrayName?"}}
test sunrpc-6.7 {sunrpc pcnfs command} {
    global target
    list [catch {sunrpc pcnfs $target info status bar} msg] $msg
} {1 {wrong # args: should be "sunrpc pcnfs host info ?arrayName?"}}
test sunrpc-6.8 {sunrpc pcnfs command} {
    global target
    list [catch {sunrpc pcnfs $target list foo bar} msg] $msg
} {1 {wrong # args: should be "sunrpc pcnfs host list ?arrayName?"}}
test sunrpc-6.9 {sunrpc pcnfs command} {
    list [catch {sunrpc pcnfs !@#$% list} msg] $msg
} {1 {illegal IP address or name "!@#$%"}}

test sunrpc-7.1 {sunrpc probe command} runWithEvilCatchCrash {
    list [catch {sunrpc probe} msg] $msg
} {1 {wrong # args: should be "sunrpc probe host program version protocol"}}
test sunrpc-7.2 {sunrpc probe command} {
    list [catch {sunrpc probe host program} msg] $msg
} {1 {wrong # args: should be "sunrpc probe host program version protocol"}}
test sunrpc-7.3 {sunrpc probe command} {
    list [catch {sunrpc probe host program version} msg] $msg
} {1 {wrong # args: should be "sunrpc probe host program version protocol"}}
test sunrpc-7.4 {sunrpc probe command} {
    list [catch {sunrpc probe host program version protocol foo} msg] $msg
} {1 {wrong # args: should be "sunrpc probe host program version protocol"}}
test sunrpc-7.5 {sunrpc probe command} {
    list [catch {sunrpc probe !@#$% 100000 2 udp} msg] $msg
} {1 {illegal IP address or name "!@#$%"}}
test sunrpc-7.6 {sunrpc probe command} {
    global target
    list [catch {sunrpc probe $target foo 2 udp} msg] $msg
} {1 {expected integer but got "foo"}}
test sunrpc-7.7 {sunrpc probe command} {
    global target
    list [catch {sunrpc probe $target 100000 foo udp} msg] $msg
} {1 {expected integer but got "foo"}}
test sunrpc-7.8 {sunrpc probe command} {
    global target
    list [catch {sunrpc probe $target 100000 2 foo} msg] $msg
} {1 {unknown protocol "foo": should be tcp, or udp}}
test sunrpc-7.9 {sunrpc probe command (udp)} rpcServerAvailable {
    global target
    list [catch {
	foreach {number version proto port name} [join [sunrpc info $target]] {
            if {[string equal $proto "udp"]} {
		sunrpc probe $target $number $version udp
	    }
	}
    } msg] $msg
} {0 {}}
test sunrpc-7.10 {sunrpc probe command (tcp)} rpcServerAvailable {
    global target
    list [catch {
	foreach {number version proto port name} [join [sunrpc info $target]] {
            if {[string equal $name "tcp"]} {
		sunrpc probe $target $number $version tcp
	    }
	}
    } msg] $msg
} {0 {}}

test sunrpc-8.1 {sunrpc stat} runWithEvilCatchCrash {
    list [catch {sunrpc stat} msg] $msg
} {1 {wrong # args: should be "sunrpc stat host"}}
test sunrpc-8.2 {sunrpc stat command} {
    global target
    list [catch {sunrpc stat $target foo} msg] $msg
} {1 {wrong # args: should be "sunrpc stat host"}}
test sunrpc-8.3 {sunrpc stat command} {
    list [catch {sunrpc stat !@#$%} msg] $msg
} {1 {illegal IP address or name "!@#$%"}}
test sunrpc-8.4 {sunrpc stat command} rstatdAvailable {
    global target
    set stats [sunrpc stat $target]
    expr [llength $stats] % 3
} {0}

::tcltest::cleanupTests
return
