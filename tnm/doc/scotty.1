'\"
'\" Copyright (c) 1994-1996 Technical University of Braunschweig.
'\" Copyright (c) 1996-1997 University of Twente.
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
.so man.macros
.TH scotty 1 "July 1997" Tnm "Tnm Tcl Extension"
.BS
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
scotty \- A Tcl shell including the Tnm extensions.
.SH SYNOPSIS
\fBscotty\fR ?\fIfileName arg arg ...\fR?
.BE

.SH DESCRIPTION

\fBScotty\fR is a shell-like application that reads Tcl commands from
its standard input or from a file and evaluates them similar to
tclsh(1). The main difference between tclsh(1) and \fBscotty\fR is
that scotty loads the Tnm(n) extension at startup time and that scotty
runs in an event-driven mode while tclsh(1) needs a special command to
enable the event loop. \fBScotty\fR evaluates the commands stored in
the files \fB.tnmrc\fR and \fB.tclshrc\fR at startup if these files
exist in the home directory of the user.

.SH "SCRIPT FILES"
.PP
If \fBscotty\fR is invoked with arguments then the first argument
is the name of a script file and any additional arguments
are made available to the script as variables (see below).
Instead of reading commands from standard input \fBscotty\fR will
read Tcl commands from the named file;  \fBscotty\fR will exit
when it reaches the end of the file.
.PP
If you create a Tcl script in a file whose first line is
.RS
\fB#!/usr/local/bin/scotty%TNM_VERSION%\fR
.RE
then you can invoke the script file directly from your shell if
you mark the file as executable.
This assumes that \fBscotty\fR has been installed in the default
location in /usr/local/bin;  if it's installed somewhere else
then you'll have to modify the above line to match.
Many UNIX systems do not allow the \fB#!\fR line to exceed about
30 characters in length, so be sure that the \fBscotty\fR
executable can be accessed with a short file name.
.PP
An even better approach is to start your script files with the
following three lines:
.RS
\fB#!/bin/sh
.br
# the next line restarts using scotty \e
.br
exec scotty%TNM_VERSION% "$0" "$@"\fR
.RE
This approach has three advantages over the approach in the previous
paragraph.  First, the location of the \fBscotty\fR binary doesn't have
to be hard-wired into the script:  it can be anywhere in your shell
search path.  Second, it gets around the 30-character file name limit
in the previous approach.
Third, this approach will work even if \fBscotty\fR is
itself a shell script (this is done on some systems in order to
handle multiple architectures or operating systems:  the \fBscotty\fR
script selects one of several binaries to run).  The three lines
cause both \fBsh\fR and \fBscotty\fR to process the script, but the
\fBexec\fR is only executed by \fBsh\fR.
\fBsh\fR processes the script first;  it treats the second
line as a comment and executes the third line.
The \fBexec\fR statement cause the shell to stop processing and
instead to start up \fBscotty\fR to reprocess the entire script.
When \fBscotty\fR starts up, it treats all three lines as comments,
since the backslash at the end of the second line causes the third
line to be treated as part of the comment on the second line.

.SH VARIABLES
Scotty sets the following Tcl variables:
.TP 18
\fBargc\fR
Contains a count of the number of \fIarg\fR arguments (0 if none),
not including the name of the script file.
.TP 18
\fBargv\fR
Contains a Tcl list whose elements are the \fIarg\fR arguments,
in order, or an empty string if there are no \fIarg\fR arguments.
.TP 18
\fBargv0\fR
Contains \fIfileName\fR if it was specified.
Otherwise, contains the name by which scotty was invoked.
.TP 18
\fBtcl_interactive\fR
Contains 1 if scotty is running interactively (no
\fIfileName\fR was specified and standard input is a terminal-like
device), 0 otherwise.

.SH PROMPTS
When scotty is invoked interactively it normally prompts for each
command with ``\fB% \fR''.  You can change the prompt by setting the
variables \fBtcl_prompt1\fR and \fBtcl_prompt2\fR.  If variable
\fBtcl_prompt1\fR exists then it must consist of a Tcl script
to output a prompt;  instead of outputting a prompt scotty
will evaluate the script in \fBtcl_prompt1\fR.
The variable \fBtcl_prompt2\fR is used in a similar way when
a newline is typed but the current command isn't yet complete;
if \fBtcl_prompt2\fR isn't set then no prompt is output for
incomplete commands.

.SH SEE ALSO
Tnm(n), Tcl(n), tclsh(1)

.SH AUTHORS
Juergen Schoenwaelder <schoenw@ibr.cs.tu-bs.de>
.br
