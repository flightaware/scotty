# Makefile.in --
#
#	This file is a Makefile for Sample TEA Extension.  If it has the name
#	"Makefile.in" then it is a template for a Makefile;  to generate the
#	actual Makefile, run "./configure", which is a configuration script
#	generated by the "autoconf" program (constructs like "@foo@" will get
#	replaced in the actual Makefile.
#
# Copyright (c) 1999 Scriptics Corporation.
# Copyright (c) 2002-2005 ActiveState Corporation.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.

#========================================================================
# Add additional lines to handle any additional AC_SUBST cases that
# have been added in a customized configure script.
#========================================================================

#SAMPLE_NEW_VAR	= @SAMPLE_NEW_VAR@

# Used to version stamp several files
TNM_VERSION =	@TNM_VERSION@

# Used to pin calls to tclsh to the version used in the build.
# TODO: with stubs build this should not be needed.
TCL_VERSION =	@TCL_VERSION@

# Used to hardcode the path to tkined inside libTnm.
TKI_VERSION  =	@TKI_VERSION@

#========================================================================
# Nothing of the variables below this line should need to be changed.
# Please check the TARGETS section below to make sure the make targets
# are correct.
#========================================================================

#========================================================================
# The names of the source files is defined in the configure script.
# The object files are used for linking into the final library.
# This will be used when a dist target is added to the Makefile.
# It is not important to specify the directory, as long as it is the
# $(srcdir) or in the generic, win or unix subdirectory.
#========================================================================

PKG_SOURCES	= @PKG_SOURCES@
PKG_OBJECTS	= @PKG_OBJECTS@

PKG_STUB_SOURCES = @PKG_STUB_SOURCES@
PKG_STUB_OBJECTS = @PKG_STUB_OBJECTS@

#========================================================================
# PKG_TCL_SOURCES identifies Tcl runtime files that are associated with
# this package that need to be installed, if any.
#========================================================================

PKG_TCL_SOURCES = @PKG_TCL_SOURCES@

#========================================================================
# This is a list of public header files to be installed, if any.
#========================================================================

PKG_HEADERS	= @PKG_HEADERS@

#========================================================================
# "PKG_LIB_FILE" refers to the library (dynamic or static as per
# configuration options) composed of the named objects.
#========================================================================

PKG_LIB_FILE	= @PKG_LIB_FILE@
PKG_STUB_LIB_FILE = @PKG_STUB_LIB_FILE@

lib_BINARIES	= $(PKG_LIB_FILE)
bin_BINARIES	= nmicmpd nmtrapd
BINARIES	= $(lib_BINARIES) $(bin_BINARIES)

SHELL		= @SHELL@

srcdir		= @srcdir@
prefix		= @prefix@
exec_prefix	= @exec_prefix@

bindir		= @bindir@
libdir		= @libdir@
includedir	= @includedir@
datarootdir	= @datarootdir@
datadir		= @datadir@
mandir		= @mandir@

DESTDIR		=

PKG_DIR		= $(PACKAGE_NAME)$(PACKAGE_VERSION)
pkgdatadir	= $(datadir)/$(PKG_DIR)
pkglibdir	= $(libdir)/$(PKG_DIR)
pkgincludedir	= $(includedir)/$(PKG_DIR)

top_builddir	= .

INSTALL_OPTIONS	=
INSTALL		= @INSTALL@ ${INSTALL_OPTIONS}
INSTALL_DATA_DIR = @INSTALL_DATA_DIR@
INSTALL_DATA	= @INSTALL_DATA@
INSTALL_PROGRAM	= @INSTALL_PROGRAM@
INSTALL_SCRIPT	= @INSTALL_SCRIPT@
INSTALL_LIBRARY	= @INSTALL_LIBRARY@

PACKAGE_NAME	= @PACKAGE_NAME@
PACKAGE_VERSION	= @PACKAGE_VERSION@
CC		= @CC@
CFLAGS_DEFAULT	= @CFLAGS_DEFAULT@
CFLAGS_WARNING	= @CFLAGS_WARNING@
EXEEXT		= @EXEEXT@
LDFLAGS_DEFAULT	= @LDFLAGS_DEFAULT@
MAKE_LIB	= @MAKE_LIB@
MAKE_SHARED_LIB	= @MAKE_SHARED_LIB@
MAKE_STATIC_LIB	= @MAKE_STATIC_LIB@
MAKE_STUB_LIB	= @MAKE_STUB_LIB@
OBJEXT		= @OBJEXT@
RANLIB		= @RANLIB@
RANLIB_STUB	= @RANLIB_STUB@
SHLIB_CFLAGS	= @SHLIB_CFLAGS@
SHLIB_LD	= @SHLIB_LD@
SHLIB_LD_LIBS	= @SHLIB_LD_LIBS@
STLIB_LD	= @STLIB_LD@
#TCL_DEFS	= @TCL_DEFS@
TCL_BIN_DIR	= @TCL_BIN_DIR@
TCL_SRC_DIR	= @TCL_SRC_DIR@
TCL_LIB_SPEC	= @TCL_LIB_SPEC@
TCL_STUB_LIB_SPEC	= @TCL_STUB_LIB_SPEC@
THREADS_LIBS	= @THREADS_LIBS@
#TK_BIN_DIR	= @TK_BIN_DIR@
#TK_SRC_DIR	= @TK_SRC_DIR@

# Additional search flags needed to find the various shared libraries at
# run-time.
LD_SEARCH_FLAGS	= @LD_SEARCH_FLAGS@

# Path to use at runtime to refer to LIB_INSTALL_DIR:
LIB_RUNTIME_DIR     = $(libdir)

# Not used, but retained for reference of what libs Tcl required
#TCL_LIBS	= @TCL_LIBS@

#========================================================================
# TCLLIBPATH seeds the auto_path in Tcl's init.tcl so we can test our
# package without installing.  The other environment variables allow us
# to test against an uninstalled Tcl.  Add special env vars that you
# require for testing here (like TCLX_LIBRARY).
#========================================================================

EXTRA_PATH	= $(top_builddir):$(TCL_BIN_DIR)
#EXTRA_PATH	= $(top_builddir):$(TCL_BIN_DIR):$(TK_BIN_DIR)
TCLLIBPATH	= $(top_builddir)
TCLSH_ENV	= TCL_LIBRARY=`@CYGPATH@ $(TCL_SRC_DIR)/library`
PKG_ENV		= @LD_LIBRARY_PATH_VAR@="$(EXTRA_PATH):$(@LD_LIBRARY_PATH_VAR@)" \
		  PATH="$(EXTRA_PATH):$(PATH)" \
		  TCLLIBPATH="$(TCLLIBPATH)"

TCLSH_PROG	= @TCLSH_PROG@
TCLSH		= $(PKG_ENV) $(TCLSH_ENV) $(TCLSH_PROG)

#WISH_ENV	= TK_LIBRARY=`@CYGPATH@ $(TK_SRC_DIR)/library`
#WISH_PROG	= @WISH_PROG@
#WISH		= $(PKG_ENV) $(TCLSH_ENV) $(WISH_ENV) $(WISH_PROG)

SHARED_BUILD	= @SHARED_BUILD@

INCLUDES	= @PKG_INCLUDES@ @TCL_INCLUDES@
#INCLUDES	= @PKG_INCLUDES@ @TCL_INCLUDES@ @TK_INCLUDES@ @TK_XINCLUDES@

PKG_CFLAGS	= @PKG_CFLAGS@

# TCL_DEFS is not strictly need here, but if you remove it, then you
# must make sure that configure.ac checks for the necessary components
# that your library may use.  TCL_DEFS can actually be a problem if
# you do not compile with a similar machine setup as the Tcl core was
# compiled with.
#DEFS		= $(TCL_DEFS) @DEFS@ $(PKG_CFLAGS)
DEFS		= @DEFS@ $(PKG_CFLAGS)

# Move pkgIndex.tcl to 'BINARIES' var if it is generated in the Makefile
CONFIG_CLEAN_FILES = Makefile pkgIndex.tcl scotty config.h.in \
			ether.x mount.x pcnfsd.x rstat.x
CLEANFILES	= @CLEANFILES@

CPPFLAGS	= @CPPFLAGS@
LIBS		= @PKG_LIBS@ @LIBS@
AR		= @AR@
CFLAGS		= @CFLAGS@
COMPILE		= $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)

.SUFFIXES: .c .$(OBJEXT)

#========================================================================
# TEA TARGETS.  Please note that the "libraries:" target refers to platform
# independent files, and the "binaries:" target includes executable programs and
# platform-dependent libraries.  Modify these targets so that they install
# the various pieces of your package.  The make and install rules
# for the BINARIES that you specified above have already been done.
#========================================================================

all: binaries libraries doc

#========================================================================
# Start of user-definable TARGETS section
#========================================================================

# SunRpc needs headers and stubs to be generated
#--------------------------------------------------------------------
TNM_DIR 	= $(top_builddir)/tnm
TNM_GENERIC_DIR	= $(TNM_DIR)/generic
RPCGEN		= @RPCGEN@
PKG_LIBS	= @PKG_LIBS@

.SUFFIXES:	.x
.x.h:
	-cp $< .
	$(RPCGEN) ${@:.h=.x}

ether_clnt.c ether_xdr.c: ether.h
mount_clnt.c mount_xdr.c: mount.h
pcnfsd_clnt.c pcnfsd_xdr.c: pcnfsd.h
rstat_clnt.c rstat_xdr.c: rstat.h

tnmSunRpc.o: tnmSunRpc.c mount.h ether.h rstat.h pcnfsd.h

# tnmUnixInit initialize tkined(library) with TKI_INSTALL_DIR and uses
# TNM_INSTALL_DIR
# So we need a special treatment of this target.
#--------------------------------------------------------------------

# Directory in which to install library files belonging to the extension.
# TNM_INSTALL_DIR =	$(INSTALL_ROOT)$(prefix)/lib/tnm$(TNM_VERSION)
TNM_INSTALL_DIR	= $(pkglibdir)

# Directory in which to install the library of tkined scripts.
TKI_INSTALL_DIR =	$(INSTALL_ROOT)$(prefix)/lib/Tkined$(TKI_VERSION)

tnmUnixInit.o: tnmUnixInit.c
	$(COMPILE) -DTNMLIB=\"$(TNM_INSTALL_DIR)\" -DTKINEDLIB=\"$(TKI_INSTALL_DIR)\" -c `@CYGPATH@ $<` -o $@

NMICMPD	= $(bindir)/nmicmpd
tnmUnixIcmp.o: tnmUnixIcmp.c
	$(COMPILE) -DNMICMPD=\"$(NMICMPD)\" -c `@CYGPATH@ $<` -o $@

NMTRAPD	= $(bindir)/nmtrapd
tnmUnixSnmp.o: tnmUnixSnmp.c
	$(COMPILE) -DNMTRAPD=\"$(NMICMPD)\" -c `@CYGPATH@ $<` -o $@


# scotty et al
#--------------------------------------------------------------------
NM_LIBS		= @NM_LIBS@
nmicmpd: unix/nmicmpd.c
	$(COMPILE)  -o nmicmpd $(NM_LIBS) unix/nmicmpd.c

nmtrapd: unix/nmtrapd.c
	$(COMPILE) -o nmtrapd $(NM_LIBS) unix/nmtrapd.c

# compilation fails with:
# unix/scotty.c:143: undefined reference to `Tcl_FindExecutable'
scotty.o: unix/scotty.c
	$(COMPILE) -c $(APP_CC_SWITCHES) $(CFLAGS_DEFAULT) $(CFLAGS_WARNING) \
	    unix/scotty.c
scotty: scotty.o
	$(CC) -o $@ scotty.o $(CFLAGS) $(CFLAGS_DEFAULT) $(CFLAGS_WARNING) \
	    $(TCL_LIB_SPEC) $(TCL_STUB_LIB_SPEC) $(TRHEADS_LIBS) $(LD_SEARCH_FLAGS)

install-bin: tclscotty
	chmod 755 tclscotty
	$(INSTALL_PROGRAM) tclscotty $(DESTDIR)$(bindir)/scotty$(TNM_VERSION)

sinstall:
	@for i in $(bin_BINARIES) ; \
	    do \
	        chown root $(DESTDIR)$(bindir)/$$i ; \
	        chmod 4755 $(DESTDIR)$(bindir)/$$i ; \
	    done

# install tnm accesories
#--------------------------------------------------------------------

tnm-install: install-mibs install-lib install-agents install-site install-bin

# Some systems have broken mkdir commands. The definition below allows
# you to use a replacement (e.g. GNU mkdir) during the install process.
MKDIR		= mkdir
install-mibs:
	@for i in $(TNM_INSTALL_DIR)/mibs ; \
	    do \
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		$(MKDIR) -p $(DESTDIR)$$i; \
		chmod 755 $(DESTDIR)$$i; \
		else true; \
		fi; \
	    done;
	@for e in -SMI -TC -TM -MIB -CONF -TYPES ;  \
	    do \
	    	for i in mibs/*$$e ; \
		    do \
		    echo "Installing $$i"; \
		    $(INSTALL_DATA) $$i $(DESTDIR)$(TNM_INSTALL_DIR)/mibs ; \
		done ; \
	    done

TNM_LIBRARY_DIR	= library
TNM_LIBRARY =	$(TNM_LIBRARY_DIR)/TnmDialog.tcl \
		$(TNM_LIBRARY_DIR)/TnmTerm.tcl \
		$(TNM_LIBRARY_DIR)/TnmMap.tcl \
		$(TNM_LIBRARY_DIR)/TnmInet.tcl \
		$(TNM_LIBRARY_DIR)/TnmMib.tcl \
		$(TNM_LIBRARY_DIR)/TnmSmxProfiles.tcl \
		$(TNM_LIBRARY_DIR)/TnmSnmp.tcl \
		$(TNM_LIBRARY_DIR)/TnmScriptMib.tcl \
		$(TNM_LIBRARY_DIR)/TnmIetf.tcl \
		$(TNM_LIBRARY_DIR)/TnmEther.tcl \
		$(TNM_LIBRARY_DIR)/TnmMonitor.tcl \
		$(TNM_LIBRARY_DIR)/init.tcl
install-lib:
	@for i in $(TNM_INSTALL_DIR)/library ; \
	    do \
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		$(MKDIR) -p $(DESTDIR)$$i; \
		chmod 755 $(DESTDIR)$$i; \
		else true; \
		fi; \
	    done;
	@for i in library/README $(TNM_LIBRARY) ; \
	    do \
	    echo "Installing $$i"; \
	    $(INSTALL_DATA) $$i $(DESTDIR)$(TNM_INSTALL_DIR)/library; \
	    done
	@$(INSTALL_DATA) $(TNM_LIBRARY_DIR)/pkgIndex.tcl $(DESTDIR)$(TNM_INSTALL_DIR)/library

TNM_AGENT_DIR	= agents
TNM_AGENTS =	$(TNM_AGENT_DIR)/snmpd-tnm.tcl \
		$(TNM_AGENT_DIR)/snmpd-nfs.tcl \
		$(TNM_AGENT_DIR)/snmpd-proc.tcl
install-agents:
	@for i in $(TNM_INSTALL_DIR)/agents ; \
	    do \
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		$(MKDIR) -p $(DESTDIR)$$i; \
		chmod 755 $(DESTDIR)$$i; \
		else true; \
		fi; \
	    done;
	@for i in $(TNM_AGENT_DIR)/snmpd ; \
	    do \
	    echo "Installing $$i"; \
	    base=`basename $$i`; \
	    rm -f $(DESTDIR)$(TNM_INSTALL_DIR)/agents/$$base; \
	    sed -e 's+^exec tclsh.*$$+exec $(TCL_TCLSH) "$$0" "$$@"+'\
		    $$i > $(DESTDIR)$(TNM_INSTALL_DIR)/agents/$$base; \
	    chmod 755 $(DESTDIR)$(TNM_INSTALL_DIR)/agents/$$base; \
	    done
	@for i in $(TNM_AGENTS) $(TNM_AGENT_DIR)/README ; \
	    do \
	    echo "Installing $$i"; \
	    $(INSTALL_DATA) $$i $(DESTDIR)$(TNM_INSTALL_DIR)/agents; \
	    done

install-site:
	@for i in $(TNM_INSTALL_DIR)/site ; \
	    do \
	    if [ ! -d $$i ] ; then \
		echo "Making directory $$i"; \
		$(MKDIR) -p $(DESTDIR)$$i; \
		chmod 755 $(DESTDIR)$$i; \
		else true; \
		fi; \
	    done;

TNM_DOCS_1 	= scotty.1
TNM_DOCS_8 	= nmicmpd.8 \
		  nmtrapd.8

MAN1_INSTALL_DIR = $(mandir)/man1
MAN8_INSTALL_DIR = $(mandir)/man8
DOC_DIR = $(top_builddir)/doc
# note: mann is installed by standard target
install-man:
	@for i in $(mandir) $(MAN1_INSTALL_DIR) $(MAN8_INSTALL_DIR) ; \
	    do \
	    if [ ! -d $(DESTDIR)$$i ] ; then \
		echo "Making directory $$i"; \
		$(MKDIR) -p $(DESTDIR)$$i; \
		chmod 755 $(DESTDIR)$$i; \
		else true; \
		fi; \
	    done;
	@cd $(DOC_DIR); for i in $(TNM_DOCS_1); \
	    do \
	    echo "Installing $(DOC_DIR)/$$i"; \
	    rm -f $(DESTDIR)$(MAN1_INSTALL_DIR)/$$i; \
	    sed -e '/man\.macros/r man.macros' -e '/man\.macros/d' \
		-e 's/%TNM_VERSION%/$(TNM_VERSION)/' \
		    $$i > $(DESTDIR)$(MAN1_INSTALL_DIR)/$$i; \
	    chmod 444 $(DESTDIR)$(MAN1_INSTALL_DIR)/$$i; \
	    done;
	@cd doc; for i in $(TNM_DOCS_8); \
	    do \
	    echo "Installing $(DOC_DIR)/$$i"; \
	    rm -f $(DESTDIR)$(MAN8_INSTALL_DIR)/$$i; \
	    sed -e '/man\.macros/r man.macros' -e '/man\.macros/d' \
		-e 's/%TNM_VERSION%/$(TNM_VERSION)/' \
		    $$i > $(DESTDIR)$(MAN8_INSTALL_DIR)/$$i; \
	    chmod 444 $(DESTDIR)$(MAN8_INSTALL_DIR)/$$i; \
	    done;

clean-man:
	rm -f $(DOC_DIR)/*.n

# Run tests on tnm
#--------------------------------------------------------------------

check: scotty
	@TCLLIBPATH="$(TNM_INSTALL_DIR) $$TCLLIBPATH"; \
	export TCLLIBPATH; \
	pwd=`pwd`; cd tests; $$pwd/scotty all.tcl


# Uninstall tnm
#--------------------------------------------------------------------

uninstall-lib:
	@echo "Removing scotty$(TNM_VERSION) and tnm$(TNM_VERSION)$(SHLIB_SUFFIX)"
	@rm -f $(DESTDIR)$(bindir)/scotty$(TNM_VERSION)
	@for i in $(DESTDIR)$(pkglibdir)/* ; \
	    do \
	    if [ "`basename $$i`" != "site" ] ; then \
		echo "Removing $$i"; \
		rm -rf $$i; \
		else true; \
	        fi; \
	    done
	@if test -d $(DESTDIR)$(pkglibdir)/site/ \
              && test $$(ls -A $(DESTDIR)$(pkglibdir)/site/ 2>/dev/null) ; then \
	    echo "Preserving $(pkglibdir)/site"; \
	    else \
	      rm -rf $(DESTDIR)$(pkglibdir)/site; \
	    fi
	@echo "Removing $(pkglibdir) if empty"
	@if test -d $(DESTDIR)$(pkglibdir) \
	      && test -z "$$(ls -A $(DESTDIR)$(pkglibdir) 2>/dev/null)"; \
	    then rmdir $(DESTDIR)$(pkglibdir); fi

MANN_INSTALL_DIR = $(mandir)/mann
uninstall-doc:
	@for i in $(TNM_DOCS_1); \
	    do \
            echo "Removing $(MAN1_INSTALL_DIR)/$$i"; \
	    rm -f $(DESTDIR)$(MAN1_INSTALL_DIR)/$$i; \
	    done
	@for i in $(TNM_DOCS_8); \
	    do \
            echo "Removing $(MAN8_INSTALL_DIR)/$$i"; \
	    rm -f $(DESTDIR)$(MAN8_INSTALL_DIR)/$$i; \
	    done
	@TNM_DOCS_N=$$(cd $(DOC_DIR) && ls *.n); \
	  for i in $${TNM_DOCS_N}; \
	    do \
            echo "Removing $(MANN_INSTALL_DIR)/$$i"; \
	    rm -f $(DESTDIR)$(MANN_INSTALL_DIR)/$$i; \
	    done
	@for d in $(MAN1_INSTALL_DIR) $(MAN8_INSTALL_DIR) \
	      $(MANN_INSTALL_DIR) $(mandir); \
	    do \
	    echo "Removing $$d if empty"; \
	    if test -d $(DESTDIR)$$d \
	          && test -z "$$(ls -A $(DESTDIR)$$d 2>/dev/null)" ; then \
	        rmdir $(DESTDIR)$$d; fi ;\
	    done


uninstall: uninstall-binaries uninstall-lib uninstall-doc

#========================================================================
# The binaries target builds executable programs, Windows .dll's, unix
# shared/static libraries, and any other platform-dependent files.
# The list of targets to build for "binaries:" is specified at the top
# of the Makefile, in the "BINARIES" variable.
#========================================================================

binaries: $(BINARIES)

libraries:

#========================================================================
# Your doc target should differentiate from doc builds (by the developer)
# and doc installs (see install-doc), which just install the docs on the
# end user machine when building from source.
#========================================================================

doc:
	@echo Converting manual files
	@(cd $(DOC_DIR) && TNM_DOCS_N=$$(ls *.n.in); \
	  for i in $${TNM_DOCS_N}; \
	    do \
	    sed -e '/man\.macros/r man.macros' -e '/man\.macros/d' \
	        -e 's/%TNM_VERSION%/$(TNM_VERSION)/' \
	        $$i > $${i%%.in}; \
	    done)

install: all install-binaries install-libraries install-doc tnm-install
	@echo ""
	@echo "The Tnm extension installed two programs (nmicmpd, nmtrapd)"
	@echo "which require root permissions to run."
	@echo "Type 'make sinstall' as root to make them setuid root."
	@echo ""

install-binaries: binaries install-lib-binaries install-bin-binaries

#========================================================================
# This rule installs platform-independent files, such as header files.
# The list=...; for p in $$list handles the empty list case x-platform.
#========================================================================

install-libraries: libraries tnm-install
	@$(INSTALL_DATA_DIR) $(DESTDIR)$(includedir)
	@echo "Installing header files in $(DESTDIR)$(includedir)"
	@list='$(PKG_HEADERS)'; for i in $$list; do \
	    echo "Installing $(srcdir)/$$i" ; \
	    $(INSTALL_DATA) $(srcdir)/$$i $(DESTDIR)$(includedir) ; \
	done;

#========================================================================
# Install documentation.  Unix manpages should go in the $(mandir)
# directory.
#========================================================================

install-doc: doc
	@$(INSTALL_DATA_DIR) $(DESTDIR)$(mandir)/mann
	@echo "Installing documentation in $(DESTDIR)$(mandir)"
	@list='$(srcdir)/doc/*.n'; for i in $$list; do \
	    echo "Installing $$i"; \
	    $(INSTALL_DATA) $$i $(DESTDIR)$(mandir)/mann ; \
	done

test: binaries libraries
	$(TCLSH) `@CYGPATH@ $(srcdir)/tests/all.tcl` $(TESTFLAGS) \
		-load "package ifneeded ${PACKAGE_NAME} ${PACKAGE_VERSION} \
			[list load `@CYGPATH@ $(PKG_LIB_FILE)` $(PACKAGE_NAME)]"

shell: binaries libraries
	@$(TCLSH) $(SCRIPT)

gdb:
	$(TCLSH_ENV) gdb $(TCLSH_PROG) $(SCRIPT)

VALGRINDARGS =	--tool=memcheck --num-callers=8 --leak-resolution=high \
		--leak-check=yes --show-reachable=yes -v

valgrind: binaries libraries
	$(TCLSH_ENV) valgrind $(VALGRINDARGS) $(TCLSH_PROG) \
		`@CYGPATH@ $(srcdir)/tests/all.tcl` $(TESTFLAGS)

valgrindshell: binaries libraries
	$(TCLSH_ENV) valgrind $(VALGRINDARGS) $(TCLSH_PROG) $(SCRIPT)

depend:

#========================================================================
# $(PKG_LIB_FILE) should be listed as part of the BINARIES variable
# mentioned above.  That will ensure that this target is built when you
# run "make binaries".
#
# The $(PKG_OBJECTS) objects are created and linked into the final
# library.  In most cases these object files will correspond to the
# source files above.
#========================================================================

# leg20170215: add PKG_LIB as dependencies to build rpc 
$(PKG_LIB_FILE): $(PKG_OBJECTS) $(PKG_LIBS)
	-rm -f $(PKG_LIB_FILE)
	${MAKE_LIB}
	$(RANLIB) $(PKG_LIB_FILE)

$(PKG_STUB_LIB_FILE): $(PKG_STUB_OBJECTS)
	-rm -f $(PKG_STUB_LIB_FILE)
	${MAKE_STUB_LIB}
	$(RANLIB_STUB) $(PKG_STUB_LIB_FILE)

#========================================================================
# We need to enumerate the list of .c to .o lines here.
#
# In the following lines, $(srcdir) refers to the toplevel directory
# containing your extension.  If your sources are in a subdirectory,
# you will have to modify the paths to reflect this:
#
# sample.$(OBJEXT): $(srcdir)/generic/sample.c
# 	$(COMPILE) -c `@CYGPATH@ $(srcdir)/generic/sample.c` -o $@
#
# Setting the VPATH variable to a list of paths will cause the makefile
# to look into these paths when resolving .c to .obj dependencies.
# As necessary, add $(srcdir):$(srcdir)/compat:....
#========================================================================

VPATH = $(srcdir):$(srcdir)/generic:$(srcdir)/unix:$(srcdir)/win:$(srcdir)/macosx:$(srcdir)/generic:$(srcdir)/snmp

.c.@OBJEXT@:
	$(COMPILE) -c `@CYGPATH@ $<` -o $@

#========================================================================
# Distribution creation
# You may need to tweak this target to make it work correctly.
#========================================================================

#COMPRESS	= tar cvf $(PKG_DIR).tar $(PKG_DIR); compress $(PKG_DIR).tar
COMPRESS	= tar zcvf $(PKG_DIR).tar.gz $(PKG_DIR)
DIST_ROOT	= /tmp/dist
DIST_DIR	= $(DIST_ROOT)/$(PKG_DIR)

dist-clean:
	rm -rf $(DIST_DIR) $(DIST_ROOT)/$(PKG_DIR).tar.*

dist: dist-clean
	$(INSTALL_DATA_DIR) $(DIST_DIR)
	cp -p $(srcdir)/ChangeLog $(srcdir)/README* $(srcdir)/license* \
		$(srcdir)/aclocal.m4 $(srcdir)/configure $(srcdir)/*.in \
		$(srcdir)/configure.ac $(DIST_DIR)/
	chmod 664 $(DIST_DIR)/Makefile.in $(DIST_DIR)/aclocal.m4
	chmod 775 $(DIST_DIR)/configure $(DIST_DIR)/configure.ac

	for i in $(srcdir)/*.[ch]; do \
	    if [ -f $$i ]; then \
		cp -p $$i $(DIST_DIR)/ ; \
	    fi; \
	done;

	$(INSTALL_DATA_DIR) $(DIST_DIR)/tclconfig
	cp $(srcdir)/tclconfig/install-sh $(srcdir)/tclconfig/tcl.m4 \
		$(DIST_DIR)/tclconfig/
	chmod 664 $(DIST_DIR)/tclconfig/tcl.m4
	chmod +x $(DIST_DIR)/tclconfig/install-sh

	list='demos doc generic library mac tests unix win'; \
	for p in $$list; do \
	    if test -d $(srcdir)/$$p ; then \
		$(INSTALL_DATA_DIR) $(DIST_DIR)/$$p; \
		cp -p $(srcdir)/$$p/*.* $(DIST_DIR)/$$p/; \
	    fi; \
	done

	(cd $(DIST_ROOT); $(COMPRESS);)

#========================================================================
# End of user-definable section
#========================================================================

#========================================================================
# Don't modify the file to clean here.  Instead, set the "CLEANFILES"
# variable in configure.ac
#========================================================================

clean:	clean-man
	-test -z "$(BINARIES)" || rm -f $(BINARIES)
	-rm -f *.$(OBJEXT) core *.core
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean: clean
	-rm -f *.tab.c
	-rm -f $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log config.status
	-rm -rf autom4te.cache

#========================================================================
# Install binary object libraries.  On Windows this includes both .dll and
# .lib files.  Because the .lib files are not explicitly listed anywhere,
# we need to deduce their existence from the .dll file of the same name.
# Library files go into the lib directory.
# In addition, this will generate the pkgIndex.tcl
# file in the install location (assuming it can find a usable tclsh shell)
#
# You should not have to modify this target.
#========================================================================

install-lib-binaries: binaries
	@$(INSTALL_DATA_DIR) $(DESTDIR)$(pkglibdir)
	@list='$(lib_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(INSTALL_LIBRARY) $$p $(DESTDIR)$(pkglibdir)/$$p"; \
	    $(INSTALL_LIBRARY) $$p $(DESTDIR)$(pkglibdir)/$$p; \
	    stub=`echo $$p|sed -e "s/.*\(stub\).*/\1/"`; \
	    if test "x$$stub" = "xstub"; then \
		echo " $(RANLIB_STUB) $(DESTDIR)$(pkglibdir)/$$p"; \
		$(RANLIB_STUB) $(DESTDIR)$(pkglibdir)/$$p; \
	    else \
		echo " $(RANLIB) $(DESTDIR)$(pkglibdir)/$$p"; \
		$(RANLIB) $(DESTDIR)$(pkglibdir)/$$p; \
	    fi; \
	    ext=`echo $$p|sed -e "s/.*\.//"`; \
	    if test "x$$ext" = "xdll"; then \
		lib=`basename $$p|sed -e 's/.[^.]*$$//'`.lib; \
		if test -f $$lib; then \
		    echo " $(INSTALL_DATA) $$lib $(DESTDIR)$(pkglibdir)/$$lib"; \
	            $(INSTALL_DATA) $$lib $(DESTDIR)$(pkglibdir)/$$lib; \
		fi; \
	    fi; \
	  fi; \
	done
	@list='$(PKG_TCL_SOURCES)'; for p in $$list; do \
	  if test -f $(srcdir)/$$p; then \
	    destp=`basename $$p`; \
	    echo " Install $$destp $(DESTDIR)$(pkglibdir)/$$destp"; \
	    $(INSTALL_DATA) $(srcdir)/$$p $(DESTDIR)$(pkglibdir)/$$destp; \
	  fi; \
	done
	@if test "x$(SHARED_BUILD)" = "x1"; then \
	    echo " Install pkgIndex.tcl $(DESTDIR)$(pkglibdir)"; \
	    $(INSTALL_DATA) pkgIndex.tcl $(DESTDIR)$(pkglibdir); \
	fi

#========================================================================
# Install binary executables (e.g. .exe files and dependent .dll files)
# This is for files that must go in the bin directory (located next to
# wish and tclsh), like dependent .dll files on Windows.
#
# You should not have to modify this target, except to define bin_BINARIES
# above if necessary.
#========================================================================

install-bin-binaries: binaries
	@$(INSTALL_DATA_DIR) $(DESTDIR)$(bindir)
	@list='$(bin_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$p"; \
	    $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$p; \
	  fi; \
	done

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) \
	  && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

uninstall-binaries:
	list='$(lib_BINARIES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(pkglibdir)/$$p; \
	done
	list='$(PKG_TCL_SOURCES)'; for p in $$list; do \
	  p=`basename $$p`; \
	  rm -f $(DESTDIR)$(pkglibdir)/$$p; \
	done
	list='$(bin_BINARIES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(bindir)/$$p; \
	done

.PHONY: all binaries clean depend distclean doc install libraries test

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
